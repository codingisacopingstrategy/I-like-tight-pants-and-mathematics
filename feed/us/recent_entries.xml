<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>I like tight pants and mathematics</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/" />
    <link rel="self" type="application/atom+xml" href="http://i.liketightpants.net/and/feed/us/recent_entries.xml" />
    <id>tag:i.liketightpants.net,2010-05-27:/and//1</id>
    <updated>2014-06-10T10:29:05+01:00</updated>

    <generator uri="http://www.sixapart.com/movabletype/">Melody 1.0.0</generator>

<entry>
    <title>The Underwater Screen Or Lessons From Wordperfect      </title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/the-underwater-screen-or-lessons-from-wordperfect" />
    <id>tag:i.liketightpants.net,2014:/and//1.94</id>

    <published>2014-06-10T20:21:57+01:00</published>
    <updated>2014-06-10T10:29:05+01:00</updated>

    <summary>If you happen to share a studio, an office or a live with someone who used personal computers in the 1990ies, and you are at their side when this happens, there is a significant chance this person will express a desire for a certain feature of a previous generation of word processors: I am talking about WordPerfect, and its ‘reveal codes’ option.</summary>
    <author>
        <name>tellyou</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <p>
      <img style="height: 539px; width: 795px; position: relative; margin: 0px; resize: none; zoom: 1; display: inline-block; top: 0px; left: 0px;" src="/and/assets/called/underwaterscreen_wordperfect.png" title="" class="">
<br></p>
    <p><a href="/and/hackers-culture-and-the-fear-of-wysiwyg" class="" hreflang="" target="_self" title="I like tight pants and hacker culture and the fear of wysiwyg">Hacker culture cultivates a fear of WYSIWYG editing</a>, says habitus, linking this fear to the cultural history of Unix. I have a simpler explanation: control issues. WYSIWYG is feared because one is not directly manipulating the underlying data structure, and thus, has less control. This fear is justified. Anyone who has used Microsoft Word knows the scenario: after applying several layers of formatting, the document’s behaviour seems to become erratic: remove a carriage return, and the whole layout of a subsequent paragraph might break.
      </p>
    <p>
       If you happen to share a studio, an office or a live with someone who used personal computers in the 1990ies, and you are at their side when this happens, there is a significant chance this person will express a desire for a certain feature of a previous generation of word processors: I am talking about WordPerfect, and its ‘reveal codes’ option.
      </p>
    <p>
       Wordperfect’s reveal code option presents the user with a representation of the documents data structure, showing actually which formatting options are applied, where they are applied and in which order. In The Netherlands, this option is known as the ‘onderwater scherm’, or the underwater screen, as if it gives you a better view of what is below the surface of your result.</p>
    <p>In what follows, some other underwater screens. Note that the setup provided by visual programming solutions like <a href="/and/drawing-logos" class="aloha-link-text" target="_self" title="I like tight pants and drawing logo’s">Processing</a> might resemble the underwater screen, but it is not actually the same thing. With Processing, one does sees both a textual code representation and a visual representation of the result; but it is only the code that is editable. The unique character of the underwater screen is that it works both ways: the user has access both to an interface more closely resembling the visual result, and to an interface more closely resembling the underlying data. An edit in the one affects the other.<br></p>
    <p><i>WordPerfect is now owned by the Corel Corporation, who still sell the Windows version. The screenshot above was produced with <a href="http://www.columbia.edu/~em36/wpdos/mac-intel.html" class="aloha-link-text" target="_self" title="WPDOS - WordPerfect for the Mac on Intel Macs">WPMacApp (WPMac Appliance)</a>: ‘a system for running WordPerfect for the Macintosh on Intel-based Macs’ which is freely downloadable from the internet. WPMacApp is produced by&nbsp;Eric Mendelson,&nbsp;</i><i style="font-size: 14px;">Columbia professor of English and Comparative Literature. Otherwise known as the literary executor of W.H. Auden, Mendelson sports a ‘secret life’ as a tech writer and programmer. Because of his work, running this ancient version of WordPerfect is extremely easy. Thanks, Professor Mendelson!</i></p>
    <h4>
       Macromedia Dreamweaver
      </h4>
    <p>
      <img style="height: 464px; width: 620px; position: relative; margin: 0px; resize: none; zoom: 1; display: inline-block; top: 0px; left: 0px;" src="/and/assets/called/underwaterscreen_dreamweaver.png" title="" class="">
<br></p>
    <p>The death of Dreamweaver as a professional tool is due in part to a change in the practice of webdesign. Dreamweaver is a tool to create webpages, not a tool to create dynamic systems. At the time it first becomes popular, many small sites are created as a series of HTML pages, with occasional updates. The person designing the site might then charge for each update. With the arrival of accesssible Content Managent Systems as Wordpress, this approach becomes less popular as a CMS allows clients to update pages themselves. Yet part of Dreamweaver’s demise might also be due to the cultural shift known as the ‘Web Standards Revolution’, in which a new generation of web developers and designers starts to clamour for clean codes. Dreamweaver, with its WYSIWYG editor, is suspect of creating ‘ugly code’. Dreamweaver, however, features both a visual editing interface and a code editor, and the effects of a visual edit upon the code are easily verified. Arguably, some of the accessibility (to designers) and the didactic quality of Dreamweaver’s approach is lost as web design has moved to favour ‘hand written html’.
      </p>
    <p><em>
        Dreamweaver is still available&nbsp;commercially: known as Adobe Dreamweaver ever since&nbsp;Adobe bought Macromedia in 2006, it is now part of their Creative Cloud offering. Free and open alternatives built with the same philosophy are
        <a class="aloha-link-text" href="http://kompozer.net/" target="_self" title="KompoZer - Easy web authoring">
         Kompozer
        </a>
        and
        <a class="aloha-link-text" href="http://bluegriffon.org/" target="_self" title="BlueGriffon, The next-generation Web Editor based on the rendering engine of Firefox">
         BlueGriffon
        </a>
        .
       </em></p>
    <h4>
       Inkscape
      </h4>
    <p style=""><a class="" href="" target="_self"></a>      <img style="height: 445px; width: 830px; position: relative; margin: 0px; resize: none; zoom: 1; display: inline-block; top: 0px; left: 0px;" src="/and/assets/called/underwaterscreen_inkscape.png" title="" class="">
<br></p>
    <p style="">
       Inkscape is an extremely interesting graphic design program. Mostly known for being a free and open source alternative to Adobe Illustrator, the comparison does not really do Inkscape justice. Whereas Illustrator’s development is tightly wed to <a href="/and/i-need-my-generic-font-medicine" class="aloha-link-pointer" target="_self" title="I like tight pants and i need my generic font medicine">PostScript</a>, Inkscape as a program was born for the screen. It’s native file format is SVG, which is the standard file format for vector graphics on the web.
      </p>
    <p>
       Inkscape’s XML view is a bonafide under water screen. We get to see the Document Object Model, the arborescence of XML nodes that makes up the vector drawing. We can edit values directly in the XML view. This is very similar functionality as allowed by the ’inspect element’ feature in modern web browsers. Inkscape’s implementation is rather bare-bones though: I am sure that this could become even more useful as a tool.</p>
    <p><i>Inkscape is freely available from the <a href="http://www.inkscape.org/en/" class="aloha-link-text" target="_self" title="Draw Freely. | Inkscape">projects website</a> and easy to install under Linux, Windows and OS X. Users of a recent version of OS X will also need to install <a href="http://xquartz.macosforge.org/landing/" class="aloha-link-text" target="_self" title="XQuartz">XQuartz</a>.</i></p>
    <h4>
       Aloha editor
      </h4>
    <p>
      <img class="" src="/and/assets/called/underwaterscreen_aloha.png" style="height: 512px; width: 490px; position: relative; margin: 0px; resize: none; zoom: 1; display: inline-block; top: 0px; left: 0px;" title="">
<br></p>
    <p contenteditable="">Aloha is an editor for HTML that is built on HTML5’s built-in WYSIWYG support. In recent versions of HTML, any element can be changed from a static to an editable element, while keeping its visual appearance. You can actually edit this very paragraph, because I added the ‘ContentEditable’ attribute.
      </p>
    <p>
       ContentEditable is not used all that often; consequently there are still quite some implementation differences between the browsers. There are only two editor widgets based on ContentEditable that I know of: Aloha and <a href="http://hallojs.org/" title="Hallo.js - Distraction-free Rich Text Editor for the Web">hallo.js</a>. Aloha is badly documented and not easy to wrap your head around as it is quite a lot of code. Hallo.js sets out to be more lightweight, but for now is a bit too light: it lacks basic features like inserting links and images.
      </p>
    <p>
       Because these editors are built on HTML’s native functionality, we can use all of the debugging tools the browser already ships with. Aloha promises us that its output is so good, there is no need to dive into the codes. That is not really true. Just like with Microsoft Word, there are moments where one would like to correct the automatically applied formatting commands. It is at this point that we can use the browsers functionality: we right-click on the text and choose ‘inspect element’. Once we open up the element inspection, we see an underwater view: the Document Object Model the browser has constructed, with all the nodes from the HTML with their CSS styling applied. As we edit these nodes, the visual page will change. We can even copy in HTML codes from other sources.</p>
    <p><i><a href="http://www.aloha-editor.org/" title="Aloha Editor - HTML5 WYSIWYG Editor" class="aloha-link-text">Aloha Editor</a> is a JavaScript project that can be integrated into any website. Doing so does require some programming skills as the setup is slightly more involved than for most (jQuery) plugins. For several publishing platforms prepackaged plugins exist, such as <a href="http://wordpress.org/plugins/front-end-editor/" title="WordPress › Front-end Editor « WordPress Plugins">for Wordpress</a>.</i></p>

        ]]>
    </content>
</entry>

<entry>
    <title>Hacker Culture and the Fear of WYSIWYG</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/hackers-culture-and-the-fear-of-wysiwyg" />
    <id>tag:i.liketightpants.net,2014:/and//1.97</id>

    <published>2014-05-23T01:40:24+01:00</published>
    <updated>2014-11-13T15:51:11+01:00</updated>

    <summary>Flash forward to 2014, and most Content Management Systems still offer us the same inhospitable form fields that look nothing like the page they will produce. The programmers are to blame, and here’s why.</summary>
    <author>
        <name>habitus</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
            <style>
  .article li {
      list-style: inherit !important;
  }
  .article {
  font: 15px/24px Georgia, Times, serif;
  width: 625px !important;
  padding-right: 10px !important;
}
.article * {
margin: 0;
padding: 0;
font-family: Georgia, Times, serif;
}
#aside.grid_2 {
    width: 175px;
}
.article h1, .article h2, .article h3, .article h4, .article h5, .article h6 {
	font-family: georgia, times, serif;
	font-weight: normal;
	font-style: italic;
}
.article h1 {
  font-size: 68px;
  line-height: 80px;
}
.article p { 
  margin: 0 0 18px;font: 15px/24px Georgia, Times, serif; 
}
 .article p.byline {
  font-family: Arial;
  font-size: 11px;
  line-height: 14px;
}
.article p.byline {
  margin-top: 11px;
}

.article h2 {
  font-size: 40px;
  line-height: 52px;
}
.article h3 {
  font-size: 24px;
  line-height: 30px;
}
.article h4:first-child {
    display: none;
}
.article #comments h4 {
    display: inherit;
}
.article h5 {
  font-size: 15px;
  color: #099;
}
.article h6 {
  background-color: #000;
  color: #fff;
  padding: 0 6px;
  margin-bottom: 6px;
}
.article h6 a {
  color: #fff;
}
.article .intro {
  font-size: 20px;
  font-style: italic;
  line-height: 30px;
  font-weight: normal;
}
.article blockquote {
  margin: 9px;
  color: #666;
  font-style: italic;
  border-left: inherit;
  padding-left: inherit;
  font-size: inherit;
  line-height: inherit;
}
.article a {
  color: #000;
  text-decoration: none;
  border-bottom: 1px dotted;
  outline: none;
}
.article a:active,
.article a:focus,
.article a:hover {
  border-bottom: 1px solid;
  outline: 0;
}
.article strong {
  font-weight: bold;
}
</style>
    <p>
      <img src="/and/assets/called//wysiwyg.gif" style="width: 630px; height: 84px; position: relative; margin: 0px; resize: none; zoom: 1; display: inline-block; top: 0px; left: 0px;" alt="" title="" class="">
</p>
    <h2>Or how, in 2004, I liked the editing interface of a small Amsterdam cultural institution, and why I am still waiting for it to get copied.</h2>
    <p class="intro">In 2004 I encounter the website of the Amsterdam magazine/web platform/art organisation <a href="http://www.mediamatic.net/" class="aloha-link-text" hreflang="" target="_self" title="Mediamatic.net">Mediamatic</a>. The site is remarkable in several ways. Firstly, it shows off the potential of designing with native web technologies. Its layout is a re-appraisal of one of the core fonts available to almost all surfers: Georgia, and its Italic. The striking text-heavy layout uses this typeface for body-text, in unconventionally large headings and lead-ins. Secondly, the site opens up a whole new editing experience. In edit mode, the page looks essentially the same as on the public facing site, and as I change the title it remains all grand and Italic. I had been used to content management systems proposing me sad unstyled form-fields in a default browser style, decoupling the input of text completely from the final layout. That one can get away from the default browser style, and edit in the same style as the site itself, is nothing short of a revelation to me—even if desktop software has been showing this is possible for quite some time already.</p>
    <p class="">
      <img style="height: 583px; width: 625px; position: relative; margin: 0px; resize: none; zoom: 1; display: inline-block; top: 0px; left: 0px;" src="/and/assets/called/xerox-star-8010-09.jpg" title="" class="">
</p>
    <p class="byline"><em>Xerox Star 8010 Interface</em> The promise of WYSIWYG: the editing interface on the screen resembles the output on paper.  The image shows a Xerox Star, which is a 1981 product with which Xerox tries to commercialise their Xerox Alto (1972). The influential Xerox Alto project had premiered WYSIWYG text editing among many other techniques, and heavily influenced the Apple Macintosh.<br><a href="http://www.digibarn.com/collections/screenshots/xerox-star-8010/">source</a>, Creative Commons BY NC SA @ <a href="http://www.digibarn.com/" class="aloha-link-text">the Digibarn Computer Museun</a></p>
    <p>
      <img style="height: 469px; width: 625px; position: relative; margin: 0px; resize: none; zoom: 1; display: inline-block; top: 0px; left: 0px;" src="/and/assets/called/ratpoison.png" title="" class="">
<br></p>
    <p class="byline"><em>Arch Linux interface with the ratpoison window manager.</em> An alternative user interface paradigm is embodied in the culture of Unix-like systems. Linux users are free to choose their own window manager—the part of the operating system that keeps track where to draw what to the screen. In this case, the window manager is called ‘ratpoison’: a self-conscious reference to the fact that this interface can be controlled almost entirely by keyboard.<br><a href="http://retroyou.org/MMM/IM/CARGO/COMMAND_LINE/screenshot-20070305122500.png">source</a>, part of the <a href="http://retroyou.org/MMM/IM/CARGO/COMMAND_LINE/001.html" class="aloha-link-text">COMMAND LINE_ LONELY SEARCH SESSIONS</a> @ <a href="http://retroyou.org/" class="aloha-link-text">retroyou.org</a></p>
    <p>In 2004, there are more websites with an editing experience like Mediamatic: Flickr, for example makes it possible to change the title and metadata of a photo right on the photo page itself, if one is logged in. Yet flash forward to 2014, and most Content Management Systems still offer us the same inhospitable form fields that look nothing like the page they will produce.</p>
    <p>If we look at the experience of writing on Wordpress, the most used blogging platform, the first thing one notes is that the place where one edits the posts is quite distinct from the place that is visited by the reader: you are in the ‘back end’. There is some visual resemblance between the editing interface and the article: headings are bigger then body text, italics become italic. But the font does not necessarily correspond to the resulting posts, nor do the line-width, line-height and so forth. Some other elements are not visual at all: to embed youtube and the like one uses ‘<a href="http://en.support.wordpress.com/shortcodes/">shortcodes</a>’.</p>
    <p>Technologically, what was possible in 2004 should still be possible now—the web platform has since then only advanced, offering new functionality like contentEditable which allows one to easily make a part of a webpage editable, without much further scripting. So where are the content management systems that take advantage of these technologies? To answer this question, we will have to look at how web technologies come about.</p>
    <h3>The dominant computing paradigm and its counter-point</h3>
    <p>An editing interface that visually resembles it visual result is know as WYSIWYG, What You See Is What You Get. The term dates from the introduction of the graphical user interface. The Apple Macintosh offers the first mainstream WYSIWYG programs, and the Windows 3.1 and especially Windows 95 operating systems make this approach the dominant one.</p>
    <p>A word processing program like Microsoft Word is a prototypical WYSIWYG interface: we edit in an interface that visually resembles as close as possible the result that comes out of the printer. Most graphic designers also work in WYSIWYG programs: this is the canvas based paradigm of programs like Illustrator, inDesign, Photoshop, Gimp, Scribus and Inkscape.</p>
    <p>But being the dominant paradigm for user-interfaces, especially in document creation and graphic design, does not mean the WYSIWYG legacy is the only paradigm in use. Programmer and author Michael Lopp, also known as Rands, tries to convince us that ‘nerds’ use a computer in a different way. From his self-help guide for the nerd’s significant other,&nbsp;<a href="http://randsinrepose.com/archives/the-nerd-handbook/" class="aloha-link-text" target="_self">The Nerd Handbook</a>:</p>
    <blockquote class="aloha-cite-wrapper" data-cite-id="1409931623839">
      <p>Whereas everyone else is traipsing around picking dazzling fonts to describe their world, your nerd has carefully selected a monospace typeface, which he avidly uses to manipulate the world deftly via a command line interface while the rest fumble around with a mouse.</p>
</blockquote>
    <p>Rand introduces a hypothetical nerd that uses a text based terminal interface to interact with her computer. He mentions the ‘command line’, the kind of computer interface that sees one typing in commands and which is introduced in&nbsp;<a href="http://i.liketightpants.net/and/absolute-beginners-unix-for-art-students-part-1" target="_self" class="aloha-link-text">I like tight pants and absolute beginners: Unix for Art students</a>.</p>
    <p>Yet who exactly is it who likes to use their computer in such as way? ‘Nerd’ is a terribly imprecise term: one can be a nerd at many things, and it is mainly a derogative term. But it seems safe to suggest that those using the command line have some familiarity with text as an interface, and with using programming codes. People that are steeped in or attracted by, the practice of programming.</p>
    <h3>Programmers as Gatekeepers</h3>
    <p>Since the 1990ies desktop publishing revolution Graphic Designers have been able to implement their own print designs without the intervention of engineers. In most cases this is not true for the web: the implementation of websites is ultimately done by programmers. These programmers often have an important say in the technology that is used to create a website. It is only normal that the programmers’ values and preferences are reflected in these choices.</p>
    <p>This effect is reinforced because the programming community largely owns its own means of production. In contrast with print design, the programming technologies used in creating web sites (the programming languages, the libraries, the content management systems) are almost always Free Software and/or Open Source. Even commercial Content Management Systems are often built upon existing Open Source components. There are many ways in which this is both inspiring and practical. Yet if this engagement with a collectively owned and community-driven set of tools is commendable, it has one important downside: the values of the community directly impact the character of the tools available.</p>
    <h3>Hacker Culture</h3>
    <p>Programming is not just an activity, it is embedded in a culture. All the meta-discourse surrounding programming attributes to this culture. A particularly influential strand of computing meta-discourse is what can be called ‘Hacker Culture’. If I were to characterise this culture, I would do so by sketching two highly visible programmers that are quite different in their practice, yet share a set of common cultural references in which the concept of a ‘hacker’ is important.</p>
    <p>On the one hand we can look at Richard Stallman, a founder of the Free Software Movement, tireless activist for ‘Software Freedom’. Having coded essential elements of what was to become GNU/Linux, he is just as well known for his foundational texts such as the GPL license. The concept of a hacker is important to him, as evidenced in his article <a href="https://stallman.org/articles/on-hacking.html" class="aloha-link-text">‘On Hacking’</a>.<br>
On the other hand there is someone like Paul Graham, a Silicon Valley millionaire and venture capitalist. Influential in ‘start-up’ culture, Graham has turned his own experience into something of a template for start-ups to follow: start with a small group of twenty-something programmers/entrepreneurs and create a company that tries to grow as quickly as possible, attract funding, and then either fail, be bought, or in extremely rare cases become a large publicly traded company. His vision of the start-up is both codified in writing and brought into practice at the ‘incubator’ Y Combinator.<br>
As different as Graham’s trajectory might be from Stallman’s, he too has written an <a href="http://paulgraham.com/gba.html" class="aloha-link-text">article on what it means to be a hacker</a>. The popular discussion forum he has run is called Hacker News. In fact, Graham refers to the people that start start-ups as hackers.<br>
The fact that Stallman and Graham share a certain culture is shown by the fact that their conceptions of what is a hacker is far removed from the everyday usage of the world. While to most people a hacker means someone who breaks into computer systems, Stallman and Graham agree that true sense of hacker is quite different.</p>
    <p>Thus, contesting the mainstream concept of hacker is itself important in the subculture: Douglas Thomas already describes this mechanism in his thoroughly readable introduction on Hacker Culture (2002). A detailed anthropological analysis of a slice of Hacker Culture is performed in Gabriella Coleman’s <a href="http://codingfreedom.com/" class="aloha-link-text" hreflang="" target="_self">Coding Freedom: the Ethics and Aesthetics of Hacking</a> (2012), though it seems to focus on Free Software developers of the most idealistic persuasion and seems less interested in the major role Silicon Valley dollars play in fuelling Hacker Culture. For this tension too is at the heart of hacker culture: even if Hacker Culture is a place to push new conceptions of technology, ownership and collaboration, the Hacker revolution is financed by working ‘for the man’. The Hacker Culture blossoming at universities in the 1960ies was only possible only through liberal funding through the department of Defense, today many <a href="http://www.pixelbeat.org/misc/google_stars.html" class="aloha-link-text" hreflang="" target="_self" title="Google’s Open Source Stars">leading Free and Open Software developers</a> work at Google.</p>
    <h3>Grown (Wo)men Afraid of Mice</h3>
    <p>If we want to know about Hacker’s Culture’s attitude towards user interfaces, we can start to look for anecdotal evidence. In an interview about his computing habits, arch-hacker Stallman actually seems to resemble quite closely that of the hypothetical GUI-eschewing ‘nerd’ from Rands’ article:</p>
    <blockquote class="aloha-cite-wrapper" data-cite-id="1415774591247">
      <p>I spend most of my time using Emacs [A text-editor]. I run it on a text console [A terminal], so that I don’t have to worry about accidentally touching the mouse-pad and moving the pointer, which would be a nuisance. I read and send mail  with Emacs (mail is what I do most of the time).<br>I switch to the X console [A graphical user interface] when I need to do something graphical, such as look at an image or a PDF file.</p>
</blockquote>
    <p class="byline"><a href="http://richard.stallman.usesthis.com/" class="aloha-link-text" target="_self" hreflang="" title="The Setup / Richard Stallman">The Setup / Richard Stallman</a></p>
    <p>Richard Stallman does not even use a mouse. This might seem an outlier position, yet he is not the only hacker to take such a position. Otherwise, there would be no audience for the open source window manager called ‘ratpoison’. This software allows one to control the computer without any use of the mouse, killing it metaphorically.</p>
    <p>The mouse is invented in the early sixties by Douglas Engelbart. It is incorporated into the Xerox Star system that goes on to inspire the Macintosh computer. <a href="http://www.newyorker.com/magazine/2011/05/16/creation-myth" class="aloha-link-text" target="_self" hreflang="" title="Creation Myth - The New Yorker">Steve Jobs commissions&nbsp;Dean Hovey to come up with a design that is cheap to produce, more simple and more reliable than Xerox’s version</a>. After the mouse is introduced with the Macintosh computer in 1984 it quickly spreads to PC’s, and it becomes indispensable to every day users once the Windows OS becomes mainstream in the 1990ies.</p>
    <p>The mouse is part of the paradigm of these graphical user interfaces, just like the WYSIWYG interaction model. The ascendence of these interaction models is linked to (and has probably enabled) personal computers becoming ubiquitous in the 1990ies. &nbsp;It is not this tradition that Stallman and likeminded spirits inscribe themselves in. They prefer to refer to the roots of the Hacker paradigm of computing that stretch back further: back when computers where not yet personal, and when they ran an operating system called ‘Unix’.</p>
    <h3>Unix, Hacker Culture’s Gilgamesh epic</h3>
    <p>The Unix operating system plays a particular role in the system of cultural values that make up programming culture. Developed in the 1970ies at AT&amp;T, it becomes the dominant operating system of the mainframe era of computing. In this setup, one large computer runs the main software, and various users login into this central computer from their own terminal. This terminal is an interface that allows one to send commands and view the results—the actual computation being performed on the mainframe. Variants of Unix become widely used in the world of the enterprise and in academia.</p>
    <p>The very first interface to the mainframe computers is the teletype: an electronic typewriter that allowed one to type commands to the computer, and to subsequently print the response. As teletypes get replaced by computer terminals, with CRT displays and terminals, interfaces often stay decidedly minimal. It is much cheaper to use text characters to create interfaces than to have full blown graphical user interfaces, especially as the state of the interface has to be sent over the wire from the mainframe to the terminal. Everyone who has worked in a large organisation in the 1980ies or 1990ies will remember the keyboard driven user interfaces of the time.</p>
    <p>This vision of computing is profoundly disrupted by the success of the personal computer. Bill Gates vision of ‘a personal computer in each home’ becomes a reality in the 1990ies. &nbsp;A personal computer is self-sufficient, storing its data on its own hard-drive, performing its own calculations. The PC is not hindered by having to make roundtrips to the mainframe continuously, and as processing speed increases PC’s replace text-based input with sophisticated graphical user interfaces. During the dominance of Windows operating system, for most mainstream computer users Unix seems to become a relic: after conquering the homes, Windows computers conquer the workplace as well. In 1994’s Jurassic Park, when the computer-savvy girl needs to circumvent computer security to restore the power, she is surprised to find out that <a href="https://www.youtube.com/watch?v=dFUlAQZB9Ng" class="aloha-link-text">it’s a Unix system</a>. </p>
    <p>The tables turn when in 2000 Apples new OS X operating system uses Unix. At the same time, silently but surely the Linux operating system has been building mind share. A cornerstone of the movement for Free and Open Source software, Linux is a Unix clone that is free for everyone to use, distribute, study and modify. Even if both these unixes are built on the same technology as the UNIX that powers mainframe computers, these newer versions of UNIX are used in a completely different context. Linux and OS X are designed to run on personal computers, and both come with an (optional) Graphical User Interface, making them accessible to users that have grown up on Windows and Mac OS. All of a sudden, a new generation gets to appropriate Unix. A generation which has never had to actually use a Unix system at work.</p>
    <p>Alan Kay claims that <a href="http://queue.acm.org/detail.cfm?id=1039523" class="aloha-link-text">the culture of programming is forgetful</a>. It is true that a new generation of programmers completely forgets the rejection of UNIX by consumers just years before, let alone wonder on the reasons for its demise. Yet the cultural knowledge embodied in Unix is now part of a community. The way in which Unix is used today might be completely different from the 1970ies, but Unix itself and the values it embodies has become something that unites different generations self-identifying with ‘hacker culture’.</p>
    <blockquote>
      <p>The cultural depth of Unix far exceeds naming conventions. Unix has been described as “our Gilgamesh epic” (Stephenson 1999), and its status is that of a living, adored, and complex artifact. Its epic nature is an outgrowth of its morphing flavors, always under development, that nevertheless adhere to a set of well-articulated standards and protocols: flexibility, design simplicity, clean interfaces, openness, communicability, transparency, and efficiency (Gancarz 1995; Stephenson 1999). “Unix is known, loved, understood by so many hackers,” explains sci-fi writer Neal Stephenson (1999, 69), also a fan, “that it can be re-created from scratch whenever someone needs it.”</p>
</blockquote>
    <p><em>p.51  Coleman, Coding Freedom - The Ethics and Aesthetics of Hacking. New Jersey, 2012.</em></p>
    <h3>The primacy of plain-text</h3>
    <p>If there is a lingua franca in Unix, it is ‘plain text’. Unix originated in the epoch that users would type in commands on a tele-type machine, and typing commands is still considered an essential part of using Unix-like systems today. Many of the core UNIX commands are launched with text commands, and their output is often in the form of text. This is as true for classic UNIX programs as for programs written today. Unix programs are constructed so that the output of one program can be fed into the input of another program: this ability to chain commands in ‘pipes’ depends on the fact that all these programs share the same format of out- and input, which is streams of text.</p>
    <p>The most central program in the life of a practitioner of Hacker Culture is the text editor. Contrary to a program like Word, a text editor shows the raw text of a file including any formatting commands. This is still the main paradigm for how programmers work on a project: as a bunch of text files organised in folders. This is not inherent to programming (there have been programming environments that store code in a database, or in binary files), but has proved the most lasting and popular way to do so. Unix’ tools are built around and suited for plain text files, so this approach also contributes to the ongoing popularity of Unix—and vice versa.</p>
    <p>While programming, one has to learn how to create a mental model of the object programmed. As the programmer only sees the codes, she or he has to imagine the final result while editing—then compile and run the project to see if projection was correct. This feedback loop is much slower than the feedback loop as we know it from WYSIWYG programs. Maybe it is the experience of slow feedback that gives programmers more tolerance for abstract interfaces then those of us outside this culture.</p>
    <p>While WYSIWYG has a shorter feed-back loop, it also adds additional complexity. Anyone who has used Microsoft Word knows the scenario: after applying several layers of formatting, the document’s behaviour seems to become erratic: remove a carriage return, and the whole layout of a subsequent paragraph might break. This is because the underlying structure of the rich text document (on the web, this is HTML) remains opaque to the user. With increased ease-of-use, comes a number of edge cases and a loss of control over the underlying structure.</p>
    <p>This is a trade-off someone steeped in Hacker Culture might not be willing to make. She or he would rather have an understandable, formal system by which the HTML codes are produced—even if that means editing in an environment not resembling at all the final web page—because they already know how to work this way from their experience in programming.<br>
This is shown by the popularity of a workflow and type of tool that is known as the ‘static site generator’. In this case, the workflow for creating a website is to have a series fo plain text files. Some of them represent templates, others content. After a change, the programmer runs the ‘static site generator’ and all the content is pushed through the templates to produce a series of HTML files. The content itself is often written in a code language like ‘Markdown’, that allows one to add some formatting information through type-writer like conventions: *stars* becomes <em>stars</em>.</p>
    <h3>Hacker Culture’s bias is holding back interface design</h3>
    <p>Because programmers are gatekeepers to web technology, and because programmers are influenced by Hacker Culture, the biases’ of Hacker Culture have an impact outside of this subculture. The world of programming is responsible for its own tools, and contemporary web-sites are built by programmers upon Open Source libraries developed by other programmers. Shaped by the culture of Unix and plain-text, and by the practice of programming, WYSIWYG interfaces are not interesting to most Open Source developers. Following the mantra to ‘scratch one’s own itch’, developers work on the interfaces that interest them. There are scores of the aforementioned ‘static site generators’:  <a href="http://staticsitegenerators.net/" class="aloha-link-text">242 of them</a>, on last count.</p>
    <p>Comparatively, the offer of WYSIWYG libraries is meagre. Even if HTML5’s ContentEditable property has been around for ages, it is not used all that often; consequently there are still quite some implementation differences between the browsers. The lack of interest in WYSIWYG editors means the interfaces are going to be comparatively flakey, which in turn confirms programmers looking for an editing solution in their suspicions that WYSIWYG is not a viable solution. There are only two editor widgets based on ContentEditable that I know of: <a href="http://aloha-editor.org/" class="aloha-link-text" hreflang="">Aloha</a> and <a href="http://hallojs.org/" class="aloha-link-text" hreflang="" target="_self" title="Hallo.js - Distraction-free Rich Text Editor for the Web">hallo.js</a>. Aloha is badly documented and not easy to wrap your head around as it is quite a lot of code. Hallo.js sets out to be more lightweight, but for now is a bit too light: it lacks basic features like inserting links and images. </p>
    <p>The problem with the culture of plain-text is not plain-text as a format. It is plain text as an interface. Michael Murtaugh has written a thoughtful piece on this in the context of The Institute for Network Cultures’ Independent Publishing Toolkit: <a href="http://digitalpublishingtoolkit.org/2014/04/mark-me-up-mark-me-down/" class="aloha-link-text">Mark me up, mark me down!</a>.  Working with a static site generator, it becomes clear they are envisioned as a one way street: you change the source files, the final (visual) result changes. There is no way in which a change in the generated page, can be fed back into the source. Similarly, the <a href="http://daringfireball.net/projects/markdown/" class="aloha-link-text">Markdown</a> format is designed to input by a text-editor, and than programmatically turned into HTML. Whereas HTML allows for multiple kinds of interfaces (either more visual or more text oriented), a programmer-driven choice for Markdown forces the Unix love of editing plain text onto everybody.</p>
    <p>If WYSIWYG would be less of a taboo in Hacker Culture, we could also see interesting solutions that cross the divide code/WYSIWYG. <a href="http://i.liketightpants.net/and/the-underwater-screen-or-lessons-from-wordperfect" class="aloha-link-text" hreflang="" target="_self">A great, basic example is the ‘reveal codes’ function of WordPerfect</a>, the most popular word processor before the ascendency of Microsoft Word. When running into a formatting problem, using ‘reveal codes’ shows an alternative view of the document, highlighting the structure by which the formatting instructions have been applied—not unlike the ‘DOM inspector’ in today’s browsers. </p>
    <p>More radical examples of interfaces that combine the immediacy of manipulating a canvas with the potential of code can be found in Desktop software. The 3D editing program Blender has a tight integration between a visual interface and a code interface. All the actions performed in the interface are logged in programming code, so that one can easily base scripts on actions performed in the GUI. Selecting an element will also show its position in the object model, for easy scripting access. </p>
    <p>HTML is flexible enough so that one can edit it with a text editor, but one can also create a graphical editor that works with HTML. Through the JavaScript language, a web interface has complete dynamic access to the page’s HTML elements. This makes it possible to imagine all kinds of interfaces that go beyond the paradigms we know from Microsoft Word on the one hand and code editors on the other. This potential comes at the expense of succinctness: to be flexible enough to work under multiple circumstances, HTML has to be quite verbose. Even if the HTML5 standard has already added some modifications to make it more sparse, for adepts of Hacker Culture it is not succinct enough: hence solutions like Markdown. However, to build a workflow around such a sparse plain-text format, is to negate that different people might want to interact with the content in a different way. The interface that is appropriate to a writer, might not be the interface that is appropriate to an editor, or to a designer.</p>
    <h3>Conclusion</h3>
    <p>The interfaces we use on the web are strongly influenced by the values of the programmers that make them, who reject the mainstream WYSIWYG paradigm. Yet What you see is what you get is not going anywhere soon. It is what made the Desktop computer possible, and for tasks such as document production, it is the computing reality for millions of users. Rather than posing a rejection, there is ample space to reinvent what WYSIWYG means, especially in the context of the web, and to find ways to combine it with the interface models that come from the traditions of Unix and Hacker Culture. Here’s to hoping that a new generation of developers will be able to go beyond the fetish for plain text, and help to invent exciting new ways of creating visual content.</p>
    <p><br></p>
    <p><br></p>
    <p></p>
    <hr style="border-width:2px">
    <p></p>
    <p><br></p>
    <p><br></p>
    <p><br></p>
<div id="aside" style="padding-top: 0px; margin-top: -14px;" class="">This article has been <a href="http://www.mediamatic.net/368415/en/hacker-culture-and-the-fear-of-wysiwyg" class="aloha-link-text">cross-posted on Mediamatic</a>. It started out in the context of <a href="http://www.bat-editions.net/" title="BAT stands for Books, Art and Texts">BAT</a>’s residency at <a href="http://www.lapanacee.org/en" title="La Panacée | Centre de culture contemporaine — Montpellier">la Panacée</a> where habitus intervened together with Alexandre Leray and Stéphanie Vilayphiou of <a href="http://osp.kitchen/" title="OSP (Open Source Publishing) →">OSP</a> for a research session on the modalities of on-line writing.<br><br>

The publication of the article coincides with the conference ‘<a href="http://digitalpublishingtoolkit.org/22-23-may-2014/program/" title="Program | DIGITAL PUBLISHING TOOLKIT for the Arts and Culture">Off the Press</a>’, organised in Rotterdam by the <a href="http://networkcultures.org/wpmu/portal/" title="Institute of Network Cultures | The Institute of Network Cultures portal">Institute of Network Cultures</a> as part of the <a href="http://digitalpublishingtoolkit.org/" title="DIGITAL PUBLISHING TOOLKIT for the Arts and Culture | RAAK-MKB project by Institute of Network Cultures, Hogeschool van Amsterdam">Digital Publishing Toolkit</a>.<br><br>

The digital publishing toolkit is a project that tries to come up with tools and best practices for independent electronic publishing in the field of art. This means coming up with workflows that allow different professionals to add their value to the process: writers, editors, designers, developers (these categories may overlap).<br><br>

As explained in this article, I like tight pants would advise the creators of the toolkit against interfaces too strongly biased towards programmer values but urge them to instead find solutions that allow multiple kinds of interfaces to the source—in short, using a plain text format like <a href="http://daringfireball.net/projects/markdown/" title="Daring Fireball: Markdown">Markdown</a> should not be forced upon all contributors.</div>
        ]]>
    </content>
</entry>

<entry>
    <title>      Graphic Design Is A Nostalgic Field     </title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/graphic-design-is-a-nostalgic-field" />
    <id>tag:i.liketightpants.net,2014:/and//1.91</id>

    <published>2014-02-19T20:02:50+01:00</published>
    <updated>2014-05-11T23:07:49+01:00</updated>

    <summary>Graphic design is a nostalgic field. Even in the art schools, the students want to make books and posters.</summary>
    <author>
        <name>tellyou</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <iframe allowfullscreen="" frameborder="0" height="468" mozallowfullscreen="" src="//player.vimeo.com/video/87130241?title=0&amp;byline=0&amp;portrait=0&amp;color=3e4f5f" webkitallowfullscreen="" width="830"></iframe>
    <p class="byline">
       Pierre Huyghebaert (r) and Eric Schrijver from
       <a class="aloha-link-text" href="http://osp.constantvzw.org/" target="_self" title="OSP (Open Source Publishing) →">
        OSP Open Source Publishing
       </a>
       , in an excerpt from
       <a class="aloha-link-text" href="https://vimeo.com/50827775" target="_self" title="Conférence Open Source Publishing - Pierre Huyghebaert &amp; Eric Schrijver on Vimeo">
        their presentation
       </a>
       at the ESA Pyrénées.
      </p>
    <p>
       Graphic design is a nostalgic field. Even in the art schools, the students want to make books and posters. Designing for the web has little prestige. I could say that I want students to design for the screen, and to actively engage with their digital tools, but I first need to know what it is that makes it so attractive to design for the printing press.
      </p>
    <p>
       Books and posters nowadays start their lives on a computer in proprietary software. Many of my colleagues see the software as a neutral tool, subservient to their creativity. Therefore, the software can be used as-is. For me, software is a piece of culture, an embodiment of a certain way of thinking. The software partakes in the creation. A truly rich visual culture can only come about if designers manipulate, appropriate and subvert the software technology they use.
      </p>
    <p>
       Hacking analogue technology is a physical affair. Cracking open software requires a different sort of interaction, with programming interfaces and computer files. It requires a new set of skills that takes time and enthousiasm to attain. It is this enthousiasm that is often lacking. In fact, my students often seem scared of digital technology.
      </p>
    <p>
       So what are today's nascent designers scared of? The comparison with their attitude to printing technology shows it is not necessarily technology in general that designers are frightened of, nor is it geekiness. Designers actually take pride in the geeky details of their craft when they are related to the printing process, knowing about things like spot colours, paper stocks and binding methods. Is it a matter of differing cultures? Even though design is applied mathematics, most design majors study the humanities in high school. Code seems to belong to this other world, the world of the kids who choose mathematics. The other geeks.
      </p>
    <p>
       If the divide is social, then a gentle introduction to the other culture, the culture of programming, itself embedded in the culture of science and mathematics, should form part of a contemporary design curriculum.
      </p>
    <p>
       Or another strategy, can we force the students to get their hands dirty? With code? No more mockups. That's an efficient way to introduce the nature of the digital. There is always the question of whether designers should learn to code. I think they should.
      </p>
    <p>
       As a student, I came across a printing press that worked with movable type. I spent a day setting a simple poem. It's dirty, precise, frustrating work. At the end of the day I printed my poem, and only after I had cleaned the press, I spotted the spelling error.
      </p>
    <p>
       As tedious as the process had been, this day taught me so much about the nature of printing technology. My understanding of my profession really deepened. I know why uppercase is called uppercase (uppercase letters are stored above the lowercase ones); why leading, the space between lines, is called leading (it is strips of lead). I have an understanding of how all of the classical book layout conventions are related to the process of setting a block of movable type.
      </p>
    <p>
       Even though I never set anything in movable type again, I understand printing technology to a further extent. The same is true for code. Going through the tedious process of writing a computer program will change your understanding of the medium you work with all the time. Your dirty hands will forever influence any interaction you have with programmers.
      </p>
<div class="" id="aside" style="padding-top: 513px;">
       An earlier version of this article was published in
       <a href="http://libregraphicsmag.com/">
        Libre Graphics Magazine
       </a>
       1.4 under the title ‘Will these hands never get dirty’.
      </div>
        ]]>
    </content>
</entry>

<entry>
    <title>Who gets to write the web: the power struggles around the standards</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/who-makes-standards" />
    <id>tag:i.liketightpants.net,2013:/and//1.73</id>

    <published>2013-11-20T22:08:09+01:00</published>
    <updated>2014-10-21T17:28:11+01:00</updated>

    <summary>In this text we try to introduce in more detail what are some of the power struggles that underlie the continued development of HTML. We will look at HTML’s latest iteration, HTML5. We will see the way in which companies like Google try to further their own agenda’s, sometimes under the guise of following the bottom up inventions of web authors.</summary>
    <author>
        <name>habitus</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <style>sup { vertical-align: top; font-size: 8px; font-weight: bold; }
    a, a:visited, a:active {
      color: #000;
   }
</style>
    <p>Every page on the world wide web is constructed using a code language (more precisely a ‘markup’ language), called HTML. Like any coded language, HTML makes some things easier to express, and other things harder—as a tool, it comes with its own set of ‘affordances’.</p>
    <p>The possibilities of HTML are codified into standards documents. Yet like with the grammars of natural languages, those writing HTML codes do not always follow the standard. Authors may well ignore parts of it, or use elements in ways that clash with the original intended use. Idioms come up through copying and sharing, and become part of the vocabulary web authors teach each other. These usage patterns are to be taken into account for subsequent revisions in the HTML standard, and are a factor in driving web browser vendors’ choices in what features to implement next.</p>
    <p>For Web Browsers do not follow the standards by letter either. There are parts of the HTML standard that are not actually implemented in any popular browser. Web authors have little incentive to use them. On the other hand, web browsers might implement support for idioms that are not part of a standard, but are being used by authors.</p>
    <p>In this way, HTML’s affordances are created by what standards prescribe, what browsers allow, and what people write—and together this forms what the web can be. There is a complex interrelationship between the different parties: sometimes their interests converge, and then they drift away again. In this text we try to introduce in more detail what are some of the power struggles that underlie the continued development of HTML. We will look at HTML’s latest iteration, HTML5. We will see the way in which companies like Google try to further their own agenda’s, sometimes under the guise of following the bottom up inventions of web authors.</p>
    <h4>From Academia to Mass Media: 1989–1998</h4>
    <p>An interesting account of the first years of the development of HTML is to be found in Dave Ragget’s 1997 book ‘Ragget on HTML’ of which the chapter 2 ‘a History of HTML’ is available online (<a href="#ragget-1998" class="aloha-link-text" hreflang="">Ragget, 1998</a>). In 1989, Tim Berners Lee comes up with a system to write pages that are linked together with hyperlinks, and in this way form a web. Berners Lee constructs a language to write these pages, the HyperText Markup Language, and a protocol to transfer them: the Hypertext Transfer Protocol. The transfer protocol uses the already existing infrastructure of the internet, which is being used by academics and the military to exchange information through channels such as e-mail.</p>
    <p>
      <img style="height: 213px; width: 300px; position: relative; margin: 0px; resize: none; zoom: 1; display: inline-block; top: 0px; left: 0px;" src="/and/assets/called/OED-LEXX-Bungler.jpg" title="LEXX Editor for the OED (1985/1986), sample entry (segment of)" class="">
<br></p>
    <p class="byline">A fragment of the Oxford English Dictionary (1985), showing SGML markup&nbsp;(Standard Generalized Markup Language, 2013)<br></p>
    <p>The original implementation of the web is meant to exchange scientific information. The HTML language is based on the existing SGML standard, ‘extensively applied by the military, and the aerospace, technical reference, and industrial publishing industries.’ (<a href="#sgml-2013" class="aloha-link-text" hreflang="">Standard Generalized Markup Language, 2013</a>) &nbsp;HTML, like SGML, is a markup language. In contrast with a page description language like PostScript or PDF, a markup language is supposed to ‘describe a document's structure and other attributes’ (<a href="#sgml-2013" class="" hreflang="">Ibid</a>), without prescribing the exact page that is produced by this markup.</p>
    <p>The concept of a markup language has a number of great benefits. By leaving out page-setting instructions, the pages are quicker to download. With HTML, it is not the author, but the visitor’s browser which is finally responsible for the layout on the screen. Already in the 1990ies, before smartphones and ‘responsive design’, people access the web with different kinds of screens and devices: the browser makes it all fit on the screen.</p>
    <p>Another advantage of HTML is the fact that the language is ‘plain text’: The mark up of HTML is simple and uses normal keyboard characters. The first browsers already provide an option to ‘view source’, and see the underlying tag codes. These can easily be copied and adapted into an HTML creation of one’s own. This creates a language that is accessible for experimentation and self-learning, with a high potential for ‘bricolage’ by the budding homepage creators.</p>
    <p>The one feature of page description languages that is lacking in a markup language like HTML, though, is the possibility to easily store and transmit rich layout features. The scientific community, within which the web arose, is used to scarce layout of scientific papers (as are the other audiences in which SGML based solutions are popular). The first HTML versions provide headings, paragraphs, citation marks—but no columns, or even: images! In order to win over a larger public outside of academia, some of the visual sophistication of illustrated print media will have to find its way into the web, and thus, into HTML. This is the tension upon which some of the first battles over HTML are built.</p>
    <p>In 1993 NCSA Mosaic is released, the first graphical web browser on the Windows platform. A research project at the time, the responsible researchers launch Netscape Navigator (1994) upon graduation. An obvious tension can be seen between the original scientific community and the entrepreneurs that see a future for the web as a mass medium. In a rush to make the web attractive for a larger public, they add a lot of graphical capabilities to HTML. ‘Academics and software engineers later would argue that many of these extensions were very much ad hoc and not properly designed.’ (<a href="#ragget-1998" class="aloha-link-text" hreflang="">Ragget, 1998</a>)</p>
    <p>Whatever the original community around the web might think of the changing nature of the language, the new companies are also responsible for opening up the academic invention to the public at large. In this process, the power to define what is HTML shifts away from the community in which it originated, to the new (commercial) browser developers:</p>
    <blockquote class="aloha-cite-wrapper aloha-cite-1383659333040" data-cite-id="1383659333040">Following a predictable path, Netscape began inventing its own HTML tags as it pleased without first openly discussing them with the Web community. Netscape rarely made an appearance at the big International WWW conferences, but it seemed to be driving the HTML standard. It was a curious situation, and one that the inner core of the HTML community felt they must redress.</blockquote>
    <p style=""><span style="font-size: 14px;"></span></p>
    <p style="" class="byline"><a href="#ragget-1998" class="" hreflang="">Ibid</a></p>
    <p style=""><span style="font-size: 14px;">The situation prompts the creation of a standards body, the World Wide Web Consortium.&nbsp;</span>Initially, the W3C is not able to lay as much weight on the table as it would like. The development of HTML is still mostly driven by the browser vendors. In 1995, not wanting to be left behind on the web, the world’s largest software company Microsoft launches Internet Explorer, and sparks what is to become known as the ‘browser wars’:</p>
    <blockquote class="aloha-cite-wrapper aloha-cite-1383751941951" data-cite-id="1383751941951">(…) during the Browser Wars of the 1990s, Microsoft (MSFT) and Netscape each claimed close to 50% of the market, and their browsers were almost entirely incompatible. It wasn't uncommon to type in a URL and find that the site didn't work. Companies eager to open their virtual doors had to invest in multiple versions of their sites. In short, it was a bad situation for businesses and consumers alike. Yet the browser makers were behaving as many software companies do—by trying to out-feature the competition with the introduction of new proprietary technologies.<br></blockquote>
    <p class="byline" style=""><a href="#scanlon-2007" class="" hreflang="">Scanlon, 2007</a><br style=""></p>
    <h4>The years of web standards 1998-2007</h4>
    <p><span style="font-size: 14px;">At this point, an other group with vested interests joins the debate. The web designers who have to create web pages for their living, who are having a hard time to work in this fragmented landscape, often creating multiple versions of a site that cater to multiple browsers. The idea of browsers respecting the W3C standards becomes their rallying point, in what is known as the Web Standards Movement.&nbsp;</span>Businessweek runs a feature on Jeffrey Zeldman, an influential figure in this community, highlighting ‘his ability to talk about the dry and, let's face it, dull subject of standards in a way that made everyone see their importance.’ (<a href="#scanlon-2007" class="aloha-link-text" hreflang="">Scanlon, 2007</a>)</p>
    <p>An aside, it would be interesting to look at this group of designers more precisely: it does not represent all designers, but rather a specific subset who have a hybrid design/development skill set. They operate contrasting themselves with communication agencies who have a design/development division of labour or who invest in more traditional designer-friendly tools such as Adobe Flash or Dreamweaver—in fact, the ‘Standards Aware’ designers can be seen to advocate against these kind of tools, advocating ‘hand written html’ over the ‘bloated WYSIWYG tools’.                                                       <sup>1</sup>
</p>
    <p style="">At this point the W3C seems a natural ally to web developers. A standards body providing free standards—standards that became the stick to beat browser vendors with, and whose compliance becoming a mark of prestige for a new generation of web designer/developers. These makers group together as the Web Standards Project (1998).</p>
    <p style="">Another party to the burgeoning ‘standards movement’ are new browser developers. These browsers with a smaller market share have a hard time competing, because most web pages are built to the whims of the Netscape or Internet Explorer’s rendering engines. Web standards will make it more easy for new browsers to gain a competitive advantage. The backgrounds of the browser manufacturers are quite varied: there is the small Norwegian company Opera, there is Mozilla,&nbsp;<span style="font-size: 14px;">informed by ideals of an Open Web,</span><span style="font-size: 14px;">&nbsp;who have created the Open Source project Firefox, and there is Apple, who have created their own browser Safari so that they don’t have to rely on third parties for a smooth web experience on their operating system.</span></p>
    <p style="">The rise of Firefox, especially is spectacular. It is also a rare occasion for a new group to implicate themselves in the debate; the web users themselves. The ‘Get Firefox’ campaign that seeks to promote the software as it nears version 1.0 is completely volunteer run, and thousands of Firefox users contribute to a fundraising campaign that culminates in a 2-page ad in the New York Times (<a href="#mozilla-2014" class="aloha-link-text" hreflang="">Mozilla, 2004</a>).&nbsp;</p>
    <p style="">
      <font color="#000000"><a href="https://web.archive.org/web/20031017214723/http://wordpress.org/" class="aloha-link-text" style="" target="_self" title="WordPress — Home"></a>The success of web standards is hard to quantify, so here are some indicators of its influence. The&nbsp;successful&nbsp;blogging software WordPress (launched in 2002) puts web&nbsp;standards right in its tag line: “WordPress is a semantic personal publishing platform with a focus on aesthetics, web standards, and usability.” (<a href="#wordpress-2003" class="" hreflang="">Wordpress, 2003</a>). &nbsp;The Wordpress page also features a footer that notices ‘Valid CSS’ and ‘Valid HTML’. Such footers noting compliance to standards become something of a fashion. The use of Web Standards becomes part of Accessibility Guidelines that in some cases even become part of government regulation.</font>
<br></p>
    <h4>a new power struggle: 2007 to now</h4>
    <p style="">Standards are a work in progress, involving many actors. The confluence of browser vendors, web designers and the W3C working together has seen a great momentum, when the interests of all these parties aligned towards overcoming the power of the established browsers from Microsoft and Netscape. With the dust settled, afterwards, the way forward is less clear.</p>
    <p style="">Discontents with the W3C becomes prevalent as development of XHTML2 progresses, which more clearly outlines the vision of the W3C: towards standards that require a strict adherence (i.e., the document won’t display if not fully well-formed), in order to pave the way for a future vision of the web that will allow the content of web pages to be more easily reasoned about by software programs—a future known as the Semantic Web.</p>
    <p>Convincing arguments against a naive vision of the Semantic Web are already voiced by (<a href="#doctorow-2001" class="aloha-link-pointer" hreflang="">Doctorow, 2001</a>): since software can not easily deal with natural language, web pages would need some kind of structured metadata in addition to their linguistic content. Besides the inherent impossibility of objective frameworks for metadata (‘ontologies’), the quality of such metadata will always be lacking due to human laziness on the one hand, and the human desire to game the system on the other.                                    <sup>2</sup>
</p>
    <p><span style="font-size: 14px;">The other main argument against the new standard has been uttered in many forms around the web, among others by (<a href="#martin-2008" class="aloha-link-text" hreflang="">Martin, 2008</a>)</span><span style="font-size: 14px;">. This argument goes: the very fact that browsers are extremely forgiving in the way they interpret markup is the basis for the success of the internet: it has enabled copy-paste developing style that made the barrier to entry for creating web pages quite low.</span><br></p>
    <p style="">The most consistent and influential counter reaction to the W3C’s direction comes from an association of browser vendors known as the WHATWG (2004). They stage a coup, proposing an alternative future standard: HTML5. The name itself suggests the promise of continuity and backwards compatibility, and the standard itself focuses on capturing existing practices, with a focus on web applications.</p>
    <p style="">This coup is wildly&nbsp;successful. &nbsp;In 2007, W3C even endorses the new standard. For a while work continues on both HTML5 and XHTML2 until, in 2009 the W3C announces the decision to drop XHTML2. Many parts of the HTML5 standard are then quickly implemented in browsers. This is because the browser vendors are onboard from the beginning, but also because the standard has been based on existing practices, and does not require authors to ‘clean up their act’. HTML5 even specifies how a web browser should deal with malformed HTML tags.&nbsp;</p>
    <h4>conflicting interests, a case study: RDF/A</h4>
    <p style="">The WHATWG’s more pragmatic approach to HTML standardisation has proved successful, up to the point where the notion of ‘web standards’ is now much less present in the world of web design and development than it used to be. The Web Standards Project dissolves itself in 2013, seeing its mission largely as accomplished. ‘Standards Compliant’ is no longer a unique selling point. Wordpress’ homepage, once proudly flaunting standards compliance and semantics in it tag-line, now simply states: “WordPress is web software you can use to create a beautiful website or blog.” (<a href="#wordpress-2014" class="" hreflang="">Wordpress, 2014</a>). Gone too is the fashion of noting adherence to standards in website footers. It is as if web designer/developers no longer believe the syntactical strictness of XHTML will deliver them from tag soup.</p>
    <p style="">As part of its pragmatism, the WHATWG favours a nimble decision making process. To understand more about who writes the web now, we have to examine who partakes in this process. As far as standards bodies go, the W3C is quite open: the cost of membership is given on a sliding scale, depending on the character of the organisation applying and the country in which it is located. That isn’t the case with the WHATWG, as written in&nbsp;the Charter (<a href="#whatwg-nd" class="" hreflang="">WHATWG, n.d.</a>), ‘Membership is by invitation only’. Membership is also available only to browser vendors. This than makes it opportune to look, who are these browser vendors, what are their interests, and how do they come into play in the nature of HTML5.</p>
    <p style=""><i>Update 21-10-2014: Ian Hickson weighs in in the comment section to explain more on the process employed by the WHATWG and how it compares to the W3C. More feedback by those familiar with the process is very welcome!</i></p>
    <p style=""><span style="font-size: 14px;">As much as it advances the state of the web, HTML5 is definitely no longer focused on the ideology of the Semantic Web. To examine what this means in practice, let’s look at an element of Semantic Web technology called RDF/A: the W3C ’s intended mechanism to add extra metadata to your HTML pages. This metadata allows one to specify all kinds of relations that normally only are available when accessing the underlying data sources, paving the way to re-use and expose the information in new ways.</span></p>
    <p style="">A foundational idea of XHTML is its extensibility: based on a more abstract standard, XML, other XML based formats can be mixed in. HTML5 doesn’t provide such a format for extension. The HTML5 working group hand-picked two XML formats that can be embedded in an HTML5 document: SVG drawings and MATHML mathematical formulas.&nbsp;<span style="font-size: 14px;">RDF/A is not among the extensions allowed in HTML5.&nbsp;</span><span style="font-size: 14px;">The specification’s editor, Ian Hickson, writes&nbsp;</span>on the W3C mailing list<span style="font-size: 14px;">&nbsp;about the reasoning to omit RDF/A (<a href="#hickson-2009" class="" hreflang="">Hickson, 2009</a>). He fails to see the added value of RDF/A over ‘natural language processing’:</span></p>
    <div data-cite-id="1383751941952">
      <blockquote>
      Do we have reason to believe that it is more likely that we will get&nbsp;authors to widely and reliably include such relations than it is that we&nbsp;will get high quality natural language processing? Why?
      </blockquote>
      <blockquote class="aloha-cite-wrapper aloha-cite-1383751941953" data-cite-id="1383751941953">
        How would an RDF/RDFa system deal with the problem of the questions being unstructured natural language?
</blockquote>
</div>
    <blockquote class="aloha-cite-wrapper aloha-cite-1383751941954" data-cite-id="1383751941954">Can an RDF/RDFa system do better from a natural language query?</blockquote>
    <blockquote class="aloha-cite-wrapper aloha-cite-1383751941955" data-cite-id="1383751941955">
      People have a hard enough time (as you point out!) doing simple natural&nbsp;language queries where all they have to do is express themselves in their&nbsp;own native tongue.
</blockquote>
    <p style="" class="byline"><em>Hickson, 2009<br style=""></em></p>
    <p style=""><span style="font-size: 14px;">With natural language processing, Hickson means search algorithms that automatically distil keywords from existing documents, without the authors adding an additional formal layer as required by the Semantic Web.&nbsp;</span><span style="font-size: 14px;">With natural language query, he means that users are able to use search functionality by using phrases in regular language, or simple combinations of keywords, without having to resort to a formal query language traditionally used in databases.</span></p>
    <p style="">Hickson seems to suggest RDF/A adds nothing new or desirable, since there is an existing solution in natural language processing and natural language queries. It is then in the interest of the community not to add it:</p>
    <p style=""><em><span style="font-size: 14px;"></span></em></p>
    <blockquote class="aloha-cite-wrapper aloha-cite-1383751941956" data-cite-id="1383751941956">
      If features solve new problems in practical ways, then the cost is worth&nbsp;it. If they don't, then it behooves us not to add them, as the total cost&nbsp;to the community would not be trivial.
</blockquote>
    <p class="byline">Ibid</p>
    <p style=""><span style="font-size: 14px;">Hickson’s e-mail to the list is a wonderful example of what Americans call Astroturfing: ‘</span>the practice of masking the sponsors of a message (…) to give the appearance of it coming from a disinterested, grassroots participant. Astroturfing is intended to give the statements the credibility of an independent entity by withholding information about the source's financial connection.’&nbsp;(<a href="#astroturfing-2013" class="aloha-link-text" hreflang="">Astroturfing, 2013</a>).&nbsp;<span style="font-size: 14px;">No-one uses the terminology: ‘Searching web pages with Natural Language Queries’. They google. And Google is the employer of Hickson. Google is the company that owns the best proprietary algorithms for Natural Language search, and their own closed index of the internet on which they use them.&nbsp;</span></p>
    <p style="">The argument is&nbsp;disingenuous. Google’s algorithms are extremely good because they are a&nbsp;huge company that has invested billions of dollars in them, and they train them on huge datasets they have access to because they are at the axis of most internet traffic. Other companies do not have access to algorithms and indexes of the same quality. What Hickson says: we have an existing solution that works fine, as long as you are willing to depend on the commercial company for which I work.</p>
    <p style="">The very idea of standards is that they level the playing ground, and they allow a level playing field for the various stake-holders. Keeping the standards process neutral is more important still because a company like Google has a known record in stifling internet standards when they conflict with Google’s interest. In tech circles Google is infamous for having tried to sabotage the RSS syndication format.&nbsp;<span style="font-size: 14px;">RSS is a standard by which blogs and other periodic online publications can notify readers of new articles. Google’s Chrome browser is the only main stream browser not to support RSS. Google also created a free RSS reader software, only to discontinue the reader once it had effectively extinguished the competition (<a href="#cortesi-2013" class="aloha-link-pointer" hreflang="">Cortesi, 2013</a>).</span></p>
    <p style="">Like RSS, RDF/A provides a way for content creators to make links and cross references that do not need Google. Hickson not highlighting the conflict of interest inherit in his judgment on this HTML5 feature shows how the standards process remains fragile, and how the continued development HTML5 hinges on a balance of powers that can easily come undone. The fragility of the standards process is summarised by technologist Shelley Powers:</p>
    <blockquote>On the other, I've been a part of the HTML WG for a little while now, and I don't feel entirely happy, or comfortable with many of the decisions for X/HTML5, or for the fact that it is, for all intents and purposes, authored by one person. One person who works for Google, a company that can be aggressively competitive.</blockquote>
    <p style="" class="byline"><em><a href="#powers-2009">Powers, 2009</a></em></p>
    <h4>Conclusion</h4>
    <p style="">The history of the web is mirrored in the history of its main encoding language, HTML. As new parties start to have an interest in the web, they start to partake in the development of this language. From the academics that launch the web, to the commercial companies that develop the first mainstream browsers, to the web standards movement that sees designers and the developers that create web-sites join the conversation. Nowadays, the most influence comes from web browser manufacturers, most of whom are part of&nbsp; companies who have other, large stakes on the internet.</p>
    <p style="">This history brings some questions for the current situation. With the dissolution of the Web Standards Project, it seems web designers and developers are less implicated in the development of HTML. That is a shame, because as a voice they could provide a counterbalance to the interests of the web browser manufacturers.&nbsp;As the conflict of interest between Google and Ian Hickson shows, the process can be far from neutral.</p>
    <p style="">Theoretically, it is not just designers who should be involved, but also their clients. From businesses who sell goods, to online publications to individual bloggers, they all have an interest in being able to make the websites they want to make. Even if the standards process is messy, it still allows more influence than the ‘walled gardens’ with whom they would need to content themselves otherwise: selling and publishing through Facebook, Amazon.</p>
    <p style="">Finally, with perhaps the exception of their involvement in the success of the Firefox web browser, the one figure conspicuously missing from the standards process is the web user. From its humble beginnings as a medium for exchange of scientific reports, the web has become an intrinsic part of the live of most people on this planet. Is it time for the one body that has not been seen in the history of HTML to show up—that of consumer organisations?</p>
    <ol>
      <li>cf for instance “Giantmike's website is masterfully crafted with handwritten HTML” at&nbsp;<a href="http://www.giantmike.com/htmlbyhand.html" class="" hreflang="">http://www.giantmike.com/htmlbyhand.html</a><em><br></em></li>
      <li>With regards to laziness, it is telling that Metadata standards, while not employed en masse on the World Wide Web, have seen a great uptake in museums and archives, because these are the places where people are paid to make accurate metadata.<br><br></li>
</ol>
    <h4>Bibliography</h4>
    <p id="astroturfing-2013">
    Astroturfing. (2013, November 19). In Wikipedia, the free encyclopedia. Retrieved November 19, 2014 from <a href="http://en.wikipedia.org/w/index.php?title=Astroturfing&amp;oldid=582331848" class="aloha-link-text" hreflang="">http://en.wikipedia.org/w/index.php?title=Astroturfing&amp;oldid=582331848</a></p>
    <p id="cortesi-2013">
    Cortesi, A. (2013, March 14). Google, destroyer of ecosystems. Retrieved November 19, 2014 from <a href="http://corte.si/posts/socialmedia/rip-google-reader.html" class="aloha-link-text" hreflang="">http://corte.si/posts/socialmedia/rip-google-reader.html</a></p>
    <p id="doctorow-2001">Doctorow, C. (2001, August 26). Metacrap: Putting the torch to seven straw-men of the meta-utopia. The WELL. Retrieved November 19, 2013 from <a href="http://www.well.com/~doctorow/metacrap.htm" class="aloha-link-text" hreflang="">http://www.well.com/~doctorow/metacrap.htm</a></p>
    <p id="martin-2008">
    Martin, A. (2008, September 28). W3C go home! (C’est le HTML qu’on assasine). uZine. Retrieved November 19, 2013 from <a href="http://www.uzine.net/article1979.html" class="aloha-link-text">http://www.uzine.net/article1979.html</a></p>
    <p id="mozilla-2004">Mozilla Foundation Places Two-Page Advocacy Ad in The New York Times. (2004, December 15). Mozilla Press Center. Retrieved November 19, 2013 from <a href="https://blog.mozilla.org/press/2004/12/mozilla-foundation-places-two-page-advocacy-ad-in-the-new-york-times/" class="aloha-link-text" hreflang="">https://blog.mozilla.org/press/2004/12/mozilla-foundation-places-two-page-advocacy-ad-in-the-new-york-times/</a>.<br></p>
    <p id="hickson-2009">
    Hickson, I. (2009, February 13). Re: RDFa and Web Directions North 2009. Public-rdf-in-xhtml-tf@w3.org. Retrieved November 19, 2013 from <a href="http://lists.w3.org/Archives/Public/public-rdf-in-xhtml-tf/2009Feb/0069.html" class="aloha-link-text">http://lists.w3.org/Archives/Public/public-rdf-in-xhtml-tf/2009Feb/0069.html</a>.
</p>
    <p id="powers-2009">
    Powers, S. (2009, July 2). XHTML2 is dead. Burningbird. Retrieved November 19, 2013, from <a href="http://burningbird.net/node/12#.Uouhk6Dzs60" class="aloha-link-text" hreflang="">http://burningbird.net/node/12#.Uouhk6Dzs60</a></p>
    <p id="ragget-1998">
    Ragget, D. (1998). Chapter 2: A History of HTML. In Raggett on HTML 4 (Addison Wesley Longman, 1998). Retrieved November 19, 2013 from  <a href="http://www.w3.org/People/Raggett/book4/ch02.html" class="aloha-link-text">http://www.w3.org/People/Raggett/book4/ch02.html</a>.
</p>
    <p id="scanlon-2007">
    Scanlon, J. (2007, August 6). Jeffrey Zeldman: King of Web Standards. BusinessWeek: innovation_and_design. Retrieved November 19, 2013, from <a href="http://www.businessweek.com/stories/2007-08-06/jeffrey-zeldman-king-of-web-standardsbusinessweek-business-news-stock-market-and-financial-advice" class="aloha-link-text">http://www.businessweek.com/stories/2007-08-06/jeffrey-zeldman-king-of-web-standardsbusinessweek-business-news-stock-market-and-financial-advice</a></p>
    <p id="sgml-2013">
    Standard Generalized Markup Language. (2013, November 6). In Wikipedia, the free encyclopedia. Retrieved November 19, 2013, from <a href="http://en.wikipedia.org/w/index.php?title=Standard_Generalized_Markup_Language&amp;oldid=580454005" class="aloha-link-text">http://en.wikipedia.org/w/index.php?title=Standard_Generalized_Markup_Language&amp;oldid=580454005</a></p>
    <p id="whatwg-nd">
    Web Hypertext Application Technology Working Group Charter. (n.d.). Retrieved November 19, 2013, from <a href="http://www.whatwg.org/charter" class="aloha-link-text" hreflang="">http://www.whatwg.org/charter</a></p>
    <p>WordPress — Home. (2003, June 18). Retrieved November 19, 2013 from <a href="https://web.archive.org/web/20030618021947/http://wordpress.org/" class="aloha-link-text" hreflang="">https://web.archive.org/web/20030618021947/http://wordpress.org/</a>.</p>
    <p>WordPress — Home. (2014, September 28). Retrieved November 19, 2013 from <a href="https://web.archive.org/web/20140928052112/https://wordpress.org/" class="aloha-link-pointer" hreflang="">https://web.archive.org/web/20140928052112/https://wordpress.org/</a></p>
<div id="aside" style="padding-top: 44px;" class=""><p>This article was commissioned for “<a href="http://reader.lgru.net/pages/index/">Considering your tools.
a reader for designers and developers”</a> and is cross-posted here.</p>
    <p><em>Update October 4, 2014: Since this article’s original publication, RDF/A has been accepted as part of HTML5: <a href="http://www.w3.org/News/2013#entry-9919">http://www.w3.org/­News/­2013#entry-9919</a>.</em></p></div>
        ]]>
    </content>
</entry>

<entry>
    <title>ufo2otf Makes OTF’s, Webfonts and CSS From UFO’s</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/ufo2otf-makes-otfs-webfonts-and-css-from-ufo" />
    <id>tag:i.liketightpants.net,2013:/and//1.86</id>

    <published>2013-11-05T21:57:07+01:00</published>
    <updated>2013-11-17T14:21:12+01:00</updated>

    <summary>ufo2otf is a command line utility that takes UFO font sources and generates OTF’s and webfonts.</summary>
    <author>
        <name>bnf</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <p style="">
      <object type="image/svg+xml" style="width:830px;height:830px;" data="/and/assets/called/ufo2otf.svg">
        <img src="/and/assets/called/ufo2otf.png" style="width:830px;height:830px;" alt="A greyish starry night with a baby blue ufo shining its purple light downwards, projecting an uppercase A, slab serif.">
</object>
</p>
    <p style="" class="byline">ufo2otf logo by <a href="http://designed.with.meteor.com/by" class="aloha-link-text" style="">Loraine Furter</a> and baseline</p>
    <h4><span style="font-size: 14px;"></span>Introducing ufo2otf</h4>
    <p style=""><a href="http://github.com/fonts/ufo2otf" class="aloha-link-text" target="_self" title="fonts/ufo2otf" style="font-size: 14px;"><code>ufo2otf</code></a><span style="font-size: 14px;">&nbsp;is a command line utility that takes <a href="/and/how-it-has-come-about-that-code-hosting-site-github-offers-visualisations-of-typeface-development" class="aloha-link-text" style="" target="_self" title="I like tight pants and how it has come about that code hosting site github offers visualisations of typeface development">UFO font sources</a> and generates OTF’s and webfonts. It helps you to translate as quickly as possible your font editor’s working files into fonts one can use and install, on one’s own system, and on the web.</span></p>
    <p style="">Especially if you are following tellyou’s lead and <a href="/and/release-early-release-often-version-numbers-for-typefaces" class="aloha-link-text" style="" target="_self" title="I like tight pants and release early release often version numbers for typefaces">releasing your fonts early and often</a>, you can profit from automating this process.&nbsp;</p>
    <h4>Installation</h4>
    <p>Installing <code>ufo2otf</code> is quite easy. Well, you have to use the command line, but since <code>ufo2otf</code> itself runs on the command line, that is fair game. It is <a href="http://i.liketightpants.net/and/absolute-beginners-unix-for-art-students-part-1" class="aloha-link-text" target="_self" style="" title="I like tight pants and absolute beginners: unix for art students – part 1">a good idea to learn about the command line</a>.</p>
    <p>On a Mac, you can install it like this:</p>
    <pre>sudo easy_install ufo2otf</pre>
    <p class="byline">(On Ubuntu, you might need to do <code style="
    font-size: 11px;
">sudo apt-get install python-setuptools</code> before that will work).</p>
    <h4></h4>
    <h4>Usage</h4>
    <p>Then, you can run <code>ufo2otf</code> and have it tell you if you have got all the dependencies set up:</p>
    <pre style="">ufo2otf --diagnostics </pre>
    <p>If everything works, and the folder in which you find yourself, you can create an otf as such:</p>
    <pre>ufo2otf&nbsp;NimbusSanL-Regu.ufo</pre>
    <p>Which will create <code>NimbusSanL-Regu.otf</code>. You can also create multiple otf’s by passing multiple arguments:</p>
    <pre>ufo2otf&nbsp;NimbusSanL-Regu.ufo&nbsp;NimbusSanL-ReguItal.ufo</pre>
    <p>Which creates <code>NimbusSanL-Regu.otf</code> and <code>NimbusSanL-ReguItal.otf</code>. To also generate webfonts we pass the option <code>--webfonts</code>:</p>
    <pre>ufo2otf NimbusSanL-Regu.ufo NimbusSanL-ReguItal.ufo --webfonts</pre>
    <p>Which will additionaly create a webfonts folder with ttf, eot and woff versions of the fonts, and a css stylesheet that links the different versions together.</p>
    <p>From the command line there is even a way in which you can run it for all the ufos in the current folder. This is what I did when I created the webfonts and stylesheet for the article on <a href="/and/i-need-my-generic-font-medicine" class="" target="_self" style="" title="I like tight pants and i need my generic font medicine">the GhostScript fonts</a>:</p>
    <pre>ufo2otf *.ufo --webfonts<br></pre>
    <h4>Font compilers</h4>
    <p style="">Traditionally, computer programs are written in a language like C, which is readable to (some) humans, and then compiled to machine code, which is readable to the computer. The program that takes care of this step is called the compiler.</p>
    <p style="">If you have a set of <a href="http://i.liketightpants.net/and/how-it-has-come-about-that-code-hosting-site-github-offers-visualisations-of-typeface-development" class="aloha-link-text" target="_self" style="" title="I like tight pants and how it has come about that code hosting site github offers visualisations of typeface development">UFO source files</a>, the same logic applies: the UFO is human-readable text (even if, in this case, you never really write it yourself), and it requires a compilation step to turn it into smaller, quicker font files that your operating system knows how to use.<br style="">&nbsp;A program that is widely used in the font industry is the <a href="http://www.adobe.com/devnet/opentype/afdko.html" class="aloha-link-text" target="_self" style="" title="Adobe Font Development Kit for OpenType | Adobe Developer Connection">Adobe Font Development Kit for Opentype</a>. It comes with the makeotf command line program which is able to create otf files from a specific layout of (PostScript) source files. Font editors like Fontlab use it to generate their Opentype/CFF fonts. To use AFDKO with UFO’s, Tal Leming has created a bridge called <a href="https://github.com/typesupply/ufo2fdk" style="" target="_self" title="typesupply/ufo2fdk" class="aloha-link-text">ufo2fdk</a>. This is a python library. You first read in the UFO using another python library, <a href="/and/programmatically-manipulating-typefaces#robofab" class="aloha-link-text" target="_self" style="" title="I like tight pants and programmatically manipulating typefaces: Robofab">Robofab</a>: Robofab reads in the UFO, and ufo2fdk passes it on to the AFDKO, which generates the font.&nbsp;</p>
    <p style="">The AFDKO has some downsides when using it for a public project, where you might have a very heterogeneous working environment. It is closed source, which means there is no way that you can adapt it to new situations. For example, it is unavailable on Linux, which is not just a problem for those designers running on Linux, but also when embedding it into a web service.</p>
    <p style="">The alternative comes in the form of the Open Source font editor <a href="http://fontforge.github.io" class="" target="_self" style="" title="FontForge is a font editor">FontForge</a>. FontForge is able to read a large number of font formats, including UFO, and can generate fonts as well. FontForge is scriptable with python, and you can use FontForge in your own python scrips without launching the graphical user interface. This makes it especially suitable to be used in a compilation workflow.</p>
    <p style="">To generate OTF’s, <code>ufo2otf</code> can use both the AFDKO and FontForge. By default, it will use whichever compiler is installed (with a preference for FontForge if both are present). You can also explicitly tell it which compiler to use. This can be quite handy because different compilers might interpret UFO differently, and finding out about such inconsistencies can help to fix implementation details, or to fix ambiguities in the UFO specification.</p>
    <p>To generate webfonts, one needs to have FontForge installed. For the webfonts, <code>ufo2otf</code> will automatically perform a number of crude optimisations that are meant to make a typeface more suitable for the screen.</p>
    <h4>Why one needs a compiler for web fonts</h4>
    <p>Asides writing OTF’s, one might want to create other kind of typefaces that cater to the environment of the web. In the early days of @font-face support, serving typefaces on the web is <a href="http://v1.jontangerine.com/log/2008/10/font-face-in-ie-making-web-fonts-work" style="" target="_self" title="@font-face in IE: Making Web Fonts Work — Jon Tan 陳" class="aloha-link-text">an onerous endeavour</a>. Only one browser, Safari, supports regular otf and ttf fonts. Internet Explorer supports an alternative format, yet it must be created from a desktop application that only runs onder Windows. Early versions of Mobile Safari require yet another format: SVG fonts. The conversions needed to create all these versions, and the CSS rules required to get them all to work together, is daunting.</p>
    <p>It is at this point that FontSquirrel comes to the scene. This website offers you the possibility to create @font-face-kits: for a font you upload yourself, all the necessary versions are created, along with a CSS file. Running what probably is a headless version of Fontforge, together with a slew of other tools, the service proposes all kinds of useful modifications to your files to make them more fit to the web: automatic hinting, subsetting of the font to a defined character set (easier to download).</p>
    <p>The ease of use offered by FontSquirrel is surely an important catalyst in the way in which @font-face ends up defining the face of the web. Using Fontsquirrel, however, does has its downsides, especially when setting up an automated workflow like you do in a larger organisation or in an open source project. As a website, it is not easy to automate. Its interface is made for humans ticking the boxes, not for hooking into scripts: there is no API or Application Programmatic Interface. FontSquirrel is also always changing: this means that you can not count on an option you used yesterday to be available today. This could be OK if it were Open Source, in which case you could choose a version to run on your own computer locally, but this is not the case.</p>
    <h4>Proper css for font families</h4>
    <p style="">A nice bonus when generating webfonts with <code>ufo2otf</code> is that it produces a more usable CSS than FontSquirrel. In CSS, one can group multiple @font-face declarations into one family. One can declare a font-file to use for bold, another one for regular and yet another for the italic. This is what you want, for example, if you use together <code>NimbusSanL-Regu.otf</code>, <code>NimbusSanL-ReguItal.otf</code>, <code>NimbusSanL-Bold.otf</code> and <code>NimbusSanL-BoldItal.otf</code></p>
    <p style="">Font Squirrel produces:</p>
    <pre>@font-face {
    font-family: 'nimbus_sans_lregular';
    src: url('nimbussanl-regu-webfont.eot');
    src: url('nimbussanl-regu-webfont.eot?#iefix') format('embedded-opentype'),
         url('nimbussanl-regu-webfont.woff') format('woff'),
         url('nimbussanl-regu-webfont.ttf') format('truetype'),
         url('nimbussanl-regu-webfont.svg#nimbus_sans_lregular') format('svg');
    font-weight: normal;
    font-style: normal;

}

@font-face {
    font-family: 'nimbus_sans_lreguital';
    src: url('nimbussanl-reguital-webfont.eot');
    src: url('nimbussanl-reguital-webfont.eot?#iefix') format('embedded-opentype'),
         url('nimbussanl-reguital-webfont.woff') format('woff'),
         url('nimbussanl-reguital-webfont.ttf') format('truetype'),
         url('nimbussanl-reguital-webfont.svg#nimbus_sans_lreguital') format('svg');
    font-weight: normal;
    font-style: normal;

}

@font-face {
    font-family: 'nimbus_sans_lbold';
    src: url('nimbussanl-bold-webfont.eot');
    src: url('nimbussanl-bold-webfont.eot?#iefix') format('embedded-opentype'),
         url('nimbussanl-bold-webfont.woff') format('woff'),
         url('nimbussanl-bold-webfont.ttf') format('truetype'),
         url('nimbussanl-bold-webfont.svg#nimbus_sans_lbold') format('svg');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'nimbus_sans_lbolditalic';
    src: url('nimbussanl-boldital-webfont.eot');
    src: url('nimbussanl-boldital-webfont.eot?#iefix') format('embedded-opentype'),
         url('nimbussanl-boldital-webfont.woff') format('woff'),
         url('nimbussanl-boldital-webfont.ttf') format('truetype'),
         url('nimbussanl-boldital-webfont.svg#nimbus_sans_lbolditalic') format('svg');
    font-weight: normal;
    font-style: normal;
},</pre>
    <p style="">Instead of creating one font family, Font Squirrel uses four: <code>nimbus_sans_lregular</code>, <code>nimbus_sans_lreguital</code>, <code>nimbus_sans_lbold</code> and <code>nimbus_sans_lbolditalic</code>. Even if there are italics and bolds, they all have <code>font-style: normal</code> and <code>font-weight: normal</code>.<br>In <code>ufo2otf</code> we create just one font family, <code>Nimbus Sans L</code>, and change the <code>font-weight</code> and the <code>font-style</code> in accordance with the font variant:</p>
    <pre style="">@font-face {
    font-family: 'Nimbus Sans L';
    font-style: 'normal';
    font-weight: '400';
    src: url('NimbusSanL-Regu.eot'); /* IE9 Compat Modes */
    src: url('NimbusSanL-Regu.eot?#iefix') format('embedded-opentype'),
         url('NimbusSanL-Regu.woff') format('woff'),
         url('NimbusSanL-Regu.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Sans L';
    font-style: 'italic';
    font-weight: '400';
    src: url('NimbusSanL-ReguItal.eot'); /* IE9 Compat Modes */
    src: url('NimbusSanL-ReguItal.eot?#iefix') format('embedded-opentype'),
         url('NimbusSanL-ReguItal.woff') format('woff'),
         url('NimbusSanL-ReguItal.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Sans L';
    font-style: 'normal';
    font-weight: '700';
    src: url('NimbusSanL-Bold.eot'); /* IE9 Compat Modes */
    src: url('NimbusSanL-Bold.eot?#iefix') format('embedded-opentype'),
         url('NimbusSanL-Bold.woff') format('woff'),
         url('NimbusSanL-Bold.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Sans L';
    font-style: 'italic';
    font-weight: '700';
    src: url('NimbusSanL-BoldItal.eot'); /* IE9 Compat Modes */
    src: url('NimbusSanL-BoldItal.eot?#iefix') format('embedded-opentype'),
         url('NimbusSanL-BoldItal.woff') format('woff'),
         url('NimbusSanL-BoldItal.ttf')  format('truetype');
}
</pre>
    <p>This is easier to use: we can set the font-family <code>Nimbus Sans L</code> on the body, and bold text will automatically be rendered in the proper bold. With the Fontsquirrel CSS, you will need to explicitly assign a different font to the parts of the body that need to be rendered bold:</p>
    <pre>strong, b { <br>    font-style: normal;<br>    font-family: 'nimbus_sans_lbold'<br>}</pre>
    <p>Note that <code>ufo2otf</code>’s approach is a lot more convenient (and more semantically correct), but less foolproof: it relies on the font providing proper metadata. Also, while providing support for quite some font weights, CSS does not allow for a lot of different font-styles: only <code>normal</code> and <code>italic</code>. So you can’t have, for example, a normal and a condensed version in the same family. <code>ufo2otf</code> tries to counter this by creating a new font family for such variants:</p>
    <pre>@font-face {
    font-family: 'Nimbus Sans L Condensed';
    font-style: 'normal';
    font-weight: '700';
    src: url('NimbusSanL-BoldCond.eot'); /* IE9 Compat Modes */
    src: url('NimbusSanL-BoldCond.eot?#iefix') format('embedded-opentype'),
         url('NimbusSanL-BoldCond.woff') format('woff'),
         url('NimbusSanL-BoldCond.ttf')  format('truetype');
}</pre>
    <p>If you are curious how <code>ufo2otf</code> goes about its font detection, it is a simple Python based program and&nbsp;<a href="https://github.com/fonts/ufo2otf/blob/master/ufo2otf/compilers.py#L73" class="aloha-link-text" target="_self" style="" title="ufo2otf/ufo2otf/compilers.py at master · fonts/ufo2otf">it is in its source code that it tells the whole story</a>.</p>

        ]]>
    </content>
</entry>

<entry>
    <title>No-one Starts From Scratch: Type Design and the Logic of the Fork</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/no-one-starts-from-scratch-type-design-and-the-logic-of-the-fork" />
    <id>tag:i.liketightpants.net,2013:/and//1.80</id>

    <published>2013-10-09T22:00:57+01:00</published>
    <updated>2013-10-10T18:07:47+01:00</updated>

    <summary>But when it comes to type design, one need not look to software development. To see how building upon existing creations makes typographic sense, one can look at type design history itself.</summary>
    <author>
        <name>habitus</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <style>
h2 {
    text-rendering: optimizeLegibility;
    font-size: 72px;
    line-height: 72px;
    margin-bottom: 0px;
    font-weight: 400;
    white-space: nowrap;
}
@font-face {
    font-family: 'NotCourierSans';
    src: url('/and/assets/called/NotCourierSans-webfont.eot');
    src: url('/and/assets/called/NotCourierSans-webfont.eot?#iefix') format('embedded-opentype'),
         url('/and/assets/called/NotCourierSans-webfont.woff') format('woff'),
         url('/and/assets/called/NotCourierSans-webfont.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}

@font-face {
font-family: 'PropCourierSans';
src: url('/and/assets/called/PropCourierSans-Regular.ttf');
font-weight: normal;
font-style: normal;
}
@font-face {
    font-family: DejaVuSans;
    src: url('/and/assets/called/DejaVuSans-webfont.eot');
    src: url('/and/assets/called/DejaVuSans-webfont.eot?#iefix') format('embedded-opentype'),
         url('/and/assets/called/DejaVuSans-webfont.woff') format('woff'),
         url('/and/assets/called/DejaVuSans-webfont.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
} 
@font-face {
    font-family: 'Nimbus Mono L';
    font-style: 'normal';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/NimbusMonL-Regu.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusMonL-Regu.ttf')  format('truetype');
}
    @font-face {
        font-family:'Railway';
        src: url('/and/assets/called/railway-webfont.eot');
        src: url('/and/assets/called/railway-webfont.eot?#iefix') format('embedded-opentype'), url('/and/assets/called/railway-webfont.woff') format('woff'), url('/and/assets/called/railway-webfont.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }
    p.railway {
        font-family: Railway;
        font-size: 72px;
        line-height: 72px;
    }
</style>
    <p></p>
    <p><a href="http://www.joelswanson.net/avsh/" title="joelswanson.net / Akzidenz vs. Helvetica">
        <img style="height: 629px; width: 713px; position: relative; margin: 0px; resize: none; zoom: 1; display: inline-block; top: 0px; left: 0px;" src="/and/assets/called/avsh.gif" title="" class="" />
      </a><br /></p>
    <p class="byline"><a href="http://www.joelswanson.net/">Joel Swanson</a>: <a href="http://www.joelswanson.net/avsh/">Akzidens vs. Helvetica (2006)</a><br />Vinyl wall installation / 3d glasses&nbsp;dimensionals variable&nbsp;</p>
    <p style="">The metaphors we live by are different in each era, and tell you about the social movements shaping this moment. In the time of Snowden and Zuckerberg, we get our metaphors from Silicon Valley. The ‘fork’ is one such concept, originating in this case from the world of open source software development. Initially considered a negative occurrence, a fork is when someone creates a new version of an existing project that takes a different direction than the original maintainer imagined. &nbsp;A new style of open source collaboration, embodied in the popular code sharing platform&nbsp;<span style="font-size: 14px;"><a href="/and/how-it-has-come-about-that-code-hosting-site-github-offers-visualisations-of-typeface-development" class="" target="_self" style="" title="I like tight pants and how it has come about that code hosting site github offers visualisation of typeface development">Github</a>, encourages forking. In Github, collaboration starts by creating a fork of a project, and adding changes to this fork. Then one either contributes these changes back to the original depot (if they accept it), or one goes ones own way—a fork proper in the traditional sense.</span></p>
    <p style="">There is a lot to be said about this <a href="http://www.catb.org/esr/writings/homesteading/" target="_self" style="" title="The Cathedral and the Bazaar">‘bazaar’ style development model</a>, and how a pragmatic view on originality and authorship and an embracing of redundancy can make for a culturally rich ecosystem. These ideas are inspiring enough to see how they could also work outside the realm of software development. But when it comes to type design, one need not look to software development. To see how building upon existing&nbsp;creations makes typographic sense, one can look at type design history itself<span style="font-size: 14px;">.</span></p>
    <h4>Eric’s fork</h4>
    <p style=""><span style="font-size: 14px;"></span><span style="font-size: 14px;">Two seminal typefaces of post-war graphic design are described by their own creators as improvements upon existing fonts.</span></p>
    <p style="" class="railway">NOT THE PENGUIN YOU KNOW</p>
    <p class="byline">Justin Howes’ digitisation of Edward Johnston’s Underground typeface (<a href="http://typotech.blogspot.co.uk/2012/08/johnstons-railway-sans-edward-johnstons.html" title="Johnston’s ‘Railway’ Sans">Railway Sans</a>), the point of departure for Eric Gill’s Gill Sans</p>
    <p style=""><span style="font-size: 14px;">Gill Sans is considered Britain’s national sans serif, as seen on Penguin books and in the BBC logo. The typeface is designed by Eric Gill, who describes it as an attempt to improve Edward Johnston’s typeface made for the Tube:&nbsp;</span></p>
    <blockquote>The first notable attempt to work out the norm for plain letters was made by Mr Edward Johnston when he designed the sans-serif letter for the London Underground Railways. Some of the letters are not entirely satisfactory, especially when it is remembered that, for such a purpose, an alphabet should be as near as possible ‘fool-proof’ (…)—nothing should be left to the imagination of the signwriter or the enamel-plate maker. In this quality of ‘fool-proofness’ the Monotype sans-serif face [Gill Sans] (…) is perhaps an improvement.&nbsp;</blockquote>
    <p>On Typotheque, <a href="https://www.typotheque.com/articles/re-evaluation_of_gill_sans/" style="" target="_self" title="Typotheque: Eric Gill got it wrong; a re-evaluation of Gill Sans by Ben Archer">Ben Archer reviews</a> the way in which Eric Gill takes Johnston’s typeface as its base, and then tries to achieve more ‘fool-proofness’. For example, in letters like the b, d, p and q, which consist of stick and a belly, so to say, Gill connects the stick directly to to the belly (‘flattening of the bowl’). At the same time, Gill is not entirely consistent in this effort as he adds additional curves (cusps) to some letters (the a) while removing them in others (the i). In Archers’s opinion, this means Gill did a bad job in re-adapting the design. One can argue with his reasoning—consistency is not necessarily what makes a great typeface, and having a set of consistent letter shapes are by no means a guarantee that these letters will work well together as a typeface.</p>
    <p>Yet it is the idea that Gill Sans represents a proposition of improvement over an existing typeface, that interests me. And we can now all try and do a better job than Gill, because Greg Fleming released the source files for Justin Howes’ digitisation of Johnston’s typeface under an open source license as <a href="http://typotech.blogspot.co.uk/2012/08/johnstons-railway-sans-edward-johnstons.html" class="" style="" target="_self" title="Johnston’s Railway Sans">Railway Sans</a>.</p>
    <h4>The Swiss fork a German work horse</h4>
    <p>‘In 1956, Edouard Hoffmann, of the Haas Type Foundry in Switzerland, decided that the more natural typeface, Akzidenz Grotesk, needed to be reworked for a new century.’ (<a href="http://cis1.westerntc.edu/halee/type/face_history.html" target="_self" style="" title="max miedinger, history of helvetica">source</a>) The new typeface comes at the exact right moment to be adopted by the burgeoning Swiss International Style, and another famous 20th century typeface, is born, Helvetica.</p>
    <p>The changes are subtle, as you can see in Joe Swanson’s installation that is shown in the masthead of this article<a href="http://www.joelswanson.net/avsh/" style="" target="_self" title="joelswanson.net / Akzidenz vs. Helvetica"></a>. Whereas Helvetica has its share of adoration, like in the case of Gill, the lesser well known predecessor has its fans too. Martin Majoor is a Dutch type designer who is known for his font families that contain both sans serif and serif variations of the same skeleton, and in which the sans serifs are accorded features that are normally reserved for serif designs, like true italics (not slanted). Majoor <a href="http://www.eyemagazine.com/feature/article/inclined-to-be-dull" class="" target="_self" style="" title="Eye Magazine | Feature | Inclined to be dull">sounds off in Eye Magazine</a> about &nbsp;the dull eyesore that is Helvetica, and contrasts it with the more likeable Akzidenz. Ironically, whereas Archer accuses Gill of being inconsistent, Majoor accuses Miedinger of being too consistent in his adaptation of Akzidenz:&nbsp;</p>
    <blockquote style="">Compared to Akzidenz Grotesk, Helvetica has hardly any new features. Though claimed to be an improvement on Akzidenz Grotesk, it lacks all the character and charming clumsiness of Akzidenz Grotesk. Helvetica is blunt and colourless (…)
    <br style="" /></blockquote>
    <h4>Forking in the digital era</h4>
    <p style="">If forking defined 20th century type, one would imagine that in the digital era the promiscuous forking of typeface designs would take an ever higher flight: typefaces are distributed in a form that is extremely easy to manipulate and the tools to do so are readily available.</p>
    <p style="">Yet looking through <a href="http://typographica.org/features/our-favorite-typefaces-of-2012/" target="_self" style="" title="Our Favorite Typefaces of 2012 | Typeface Reviews | Typographica">Typographica’s favourite typefaces of 2012</a>, there is only one typeface that is explicitly based on another popular digitally available typeface: <a href="http://typographica.org/typeface-reviews/stanley/" class="" target="_self" style="">Stanley</a>, based on Times New Roman. Apparently, type designers prefer to take their inspiration from the pre-digital era: they work from <a href="http://typographica.org/typeface-reviews/henriette/" class="" target="_self" style="">Vienesse street signs</a>,<a href="http://typographica.org/typeface-reviews/trio-grotesk/" target="_self" style=""> a 1909 plain Dutch typeface in which a Piet Zwart pamphlet was set</a>, <a href="http://typographica.org/typeface-reviews/bery-roman-script-tuscan/" target="_self" style="">the work of an 18th century Parisian stencil maker who had sold all his copper plates to Benjamin Franklin</a>, &nbsp;and ‘<a href="http://typographica.org/typeface-reviews/stan/" target="_self" style="">a very little known typeface issued in 1913 by the Dresden foundry Schriftguß AG Brüder Butter</a>’.</p>
    <p style="">Why is it then that all these designers base themselves on pre-digital sources. Why don’t they work from existing digital font sources? Or, at least, do not do so openly—it might be the case that they already do so, as there is really no way to know if a designer started of with an existing digital font.</p>
    <p style="">One of the reasons the fork has flourished in type design is because copyright protection is very weak on typefaces. Like baseline describes in I like tight pants and I want my generic font medicine, it is not the design itself, but only the final digital font file that can be copyrighted. This is one of the reasons why type designers choose to work on pre-digital revivals: the practical consequence that they do not have to care about any copyrights in the original.</p>
    <p style="">Another element is that in working from pre-digital sources, typographers underline the need for their skill set, and stress the labour involved in the process. <a href="http://ospublish.constantvzw.org/blog/typo/appropriation-and-type-before-and-today" target="_self" style="" title="Appropriation and Type – before and today">Ricardo Lafuente is onto something when he borrows Fred Smeijers’ terminology, to describe type designers efforts to separate type designers into “true” type designers and mere font tweakers</a>. At least, with a digitisation, it is clear that a mere ‘tweak’ cannot suffice. Everyone who has ever digitised a font knows that it is a lengthy and laborious process to interpret the blurry analogue impression of ink on paper into the squeaky clean logic of PostScript points.</p>
    <p style="">Traditionally type design has been a discipline tightly coupled to the printing industry. To get a job as a type designer, one needed to work in the industry, because they paid for the production costs. Nowadays, the means of production for type design are practically free. Type design then, like graphic design, visual art and music, becomes a field with a very low barrier to entry. And because creative professions are fun, and are deemed to be full off rewards, many flock to these fields, leaving a situation where the offer highly outnumbers the demand (Hans Abbing wrote a great book on this: <a href="http://dare.uva.nl/aup/en/record/172819" style="" target="_self">Why are artists poor?</a>).</p>
    <p style=""><span style="font-size: 14px;">When one has invested in such a discipline, for example by following an education at the KABK in Type&amp;Media or at the University of Reading, or by joining an organisation like the ATypI, one has all the interest in defending the virtue of ‘professional art’ versus the amateurs. One way to do so is to distinguish oneself from&nbsp;</span><span style="font-size: 14px;">enthousiastic amateurs who distribute their work for free on sites like dafont, and who are not always clear about the progeny of their work.&nbsp;</span>Starting from existing digital typefaces, then, would seem uncomfortably close to a ‘font-tweaker’ approach, blurring the lines between the professionals that know the craft, and the rest of the human population that knows how to open up a font-editor.&nbsp;</p>
    <h4><span style="font-family: Verdana; font-size: 11px; font-weight: 700; line-height: 14px;"></span>
Why forking works for typefaces</h4>
    <p style=""><span style="font-size: 14px;">In software, it can be confusing to have many forks of one project existing, because it is probably practical to use just one version of the package. Cultural artefacts like typefaces, however, can more easily exist in an abundance of similar guises, because they coexist. B</span>oth the inspiration (Akzidenz) and the inspired (Helvetica) can be used by a contemporary designer. Or one might prefer to use a sibling like Univers, that shares the Akzidenz inspiration but takes it somewhere else.</p>
    <p style="">There are several versions of Johnston’s typeface available that one could use instead of Gill Sans, and, according to Archer: ‘FB Agenda (1993 by Greg Thompson), Bliss (1996 by Jeremy Tankard) and Fedra Sans (2001 by Peter Bilak), are some of the recently-produced typographical riches that all owe some part of their provenance to Edward Johnston’s sans serif lettering for the London Underground in 1916’.</p>
    <p style=""><span style="font-size: 14px;">As more and more typefaces are becoming available under various open source licenses (like the aforementioned Railway Sans, or the Ghostscript fonts baseline treats in </span><a href="/and/i-need-my-generic-font-medicine" target="_self" title="I like tight pants and I want my generic font medicine" style="font-size: 14px;">I like tight pants and I want my generic font medicine</a><span style="font-size: 14px;">), a type design culture of the digital fork becomes more and more feasible. Yet for this to happen, type designers might first need to let themselves, in Lafuente’s words, be ‘contaminated by the creeping tweaker threat’. And we are a long way from there. Even Dave Crossland, who is one of the most visible figures in the world of open source type design, and who one would suspect to embrace a culture of appropriation and re-use, has the following <a href="http://typophile.com/node/104929" target="_self" style="" title="Copyright queston | Typophile">advice</a> to an aspiring type designer:</span></p>
    <blockquote>the educational value of doing outline drawing over the top of an existing typeface design is rather low. If you want to post work for review, you'd be better off making your own typeface design from scratch :)<br /></blockquote>
    <p></p>
    <script>
$(window).load(function () {
    $("h2").on({
        mouseenter: function () {
            var newStyle = $(this).attr('data');
            var oldStyle = $(this).attr('style');
            $(this).attr('style', newStyle);
            $(this).attr('data', oldStyle);
        },
        mouseleave: function () {
            var newStyle = $(this).attr('data');
            var oldStyle = $(this).attr('style');
            $(this).attr('style', newStyle);
            $(this).attr('data', oldStyle);
        }
    });
});
</script>


        ]]>
    </content>
</entry>

<entry>
    <title>I Need My Generic Font Medicine</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/i-need-my-generic-font-medicine" />
    <id>tag:i.liketightpants.net,2013:/and//1.85</id>

    <published>2013-10-09T21:55:58+01:00</published>
    <updated>2013-10-09T15:01:33+01:00</updated>

    <summary>If you were formed in the 1990ies, these are the fonts you will feel all Oedipal about. Like medication for which the patents have expired, popular typefaces sprout generic sisters and brothers. Find ways to abuse them for your own end.</summary>
    <author>
        <name>baseline</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <style>
h2 {
    text-rendering: optimizeLegibility;
    font-size: 72px;
    line-height: 72px;
    margin-bottom: 0px;
    font-weight: 400;
    white-space: nowrap;
}

@font-face {
    font-family: 'Century Schoolbook L';
    font-style: 'italic';
    font-weight: '700';
    src: url('/and/assets/called/gs/webfonts/CenturySchL-BoldItal.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/CenturySchL-BoldItal.ttf')  format('truetype');
}

@font-face {
    font-family: 'Century Schoolbook L';
    font-style: 'normal';
    font-weight: '700';
    src: url('/and/assets/called/gs/webfonts/CenturySchL-Bold.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/CenturySchL-Bold.ttf')  format('truetype');
}

@font-face {
    font-family: 'Century Schoolbook L';
    font-style: 'italic';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/CenturySchL-Ital.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/CenturySchL-Ital.ttf')  format('truetype');
}

@font-face {
    font-family: 'Century Schoolbook L';
    font-style: 'normal';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/CenturySchL-Roma.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/CenturySchL-Roma.ttf')  format('truetype');
}

@font-face {
    font-family: 'Dingbats';
    font-style: 'normal';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/Dingbats.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/Dingbats.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Mono L';
    font-style: 'italic';
    font-weight: '700';
    src: url('/and/assets/called/gs/webfonts/NimbusMonL-BoldObli.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusMonL-BoldObli.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Mono L';
    font-style: 'normal';
    font-weight: '700';
    src: url('/and/assets/called/gs/webfonts/NimbusMonL-Bold.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusMonL-Bold.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Mono L';
    font-style: 'italic';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/NimbusMonL-ReguObli.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusMonL-ReguObli.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Mono L';
    font-style: 'normal';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/NimbusMonL-Regu.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusMonL-Regu.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Roman No9 L';
    font-style: 'italic';
    font-weight: '500';
    src: url('/and/assets/called/gs/webfonts/NimbusRomNo9L-MediItal.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusRomNo9L-MediItal.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Roman No9 L';
    font-style: 'normal';
    font-weight: '500';
    src: url('/and/assets/called/gs/webfonts/NimbusRomNo9L-Medi.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusRomNo9L-Medi.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Roman No9 L';
    font-style: 'italic';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/NimbusRomNo9L-ReguItal.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusRomNo9L-ReguItal.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Roman No9 L';
    font-style: 'normal';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/NimbusRomNo9L-Regu.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusRomNo9L-Regu.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Sans L';
    font-style: 'italic';
    font-weight: '700';
    src: url('/and/assets/called/gs/webfonts/NimbusSanL-BoldCondItal.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusSanL-BoldCondItal.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Sans L';
    font-style: 'normal';
    font-weight: '700';
    src: url('/and/assets/called/gs/webfonts/NimbusSanL-BoldCond.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusSanL-BoldCond.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Sans L';
    font-style: 'italic';
    font-weight: '700';
    src: url('/and/assets/called/gs/webfonts/NimbusSanL-BoldItal.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusSanL-BoldItal.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Sans L';
    font-style: 'normal';
    font-weight: '700';
    src: url('/and/assets/called/gs/webfonts/NimbusSanL-Bold.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusSanL-Bold.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Sans L';
    font-style: 'italic';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/NimbusSanL-ReguCondItal.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusSanL-ReguCondItal.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Sans L';
    font-style: 'normal';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/NimbusSanL-ReguCond.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusSanL-ReguCond.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Sans L';
    font-style: 'italic';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/NimbusSanL-ReguItal.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusSanL-ReguItal.ttf')  format('truetype');
}

@font-face {
    font-family: 'Nimbus Sans L';
    font-style: 'normal';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/NimbusSanL-Regu.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/NimbusSanL-Regu.ttf')  format('truetype');
}

@font-face {
    font-family: 'Standard Symbols L';
    font-style: 'normal';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/StandardSymL.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/StandardSymL.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Bookman L';
    font-style: 'italic';
    font-weight: '600';
    src: url('/and/assets/called/gs/webfonts/URWBookmanL-DemiBoldItal.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWBookmanL-DemiBoldItal.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Bookman L';
    font-style: 'normal';
    font-weight: '600';
    src: url('/and/assets/called/gs/webfonts/URWBookmanL-DemiBold.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWBookmanL-DemiBold.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Bookman L';
    font-style: 'italic';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/URWBookmanL-LighItal.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWBookmanL-LighItal.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Bookman L';
    font-style: 'normal';
    font-weight: '500';
    src: url('/and/assets/called/gs/webfonts/URWBookmanL-Ligh.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWBookmanL-Ligh.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Chancery L';
    font-style: 'italic';
    font-weight: '500';
    src: url('/and/assets/called/gs/webfonts/URWChanceryL-MediItal.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWChanceryL-MediItal.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Gothic L';
    font-style: 'italic';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/URWGothicL-BookObli.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWGothicL-BookObli.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Gothic L';
    font-style: 'normal';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/URWGothicL-Book.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWGothicL-Book.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Gothic L';
    font-style: 'italic';
    font-weight: '600';
    src: url('/and/assets/called/gs/webfonts/URWGothicL-DemiObli.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWGothicL-DemiObli.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Gothic L';
    font-style: 'normal';
    font-weight: '600';
    src: url('/and/assets/called/gs/webfonts/URWGothicL-Demi.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWGothicL-Demi.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Palladio L';
    font-style: 'italic';
    font-weight: '700';
    src: url('/and/assets/called/gs/webfonts/URWPalladioL-BoldItal.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWPalladioL-BoldItal.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Palladio L';
    font-style: 'normal';
    font-weight: '700';
    src: url('/and/assets/called/gs/webfonts/URWPalladioL-Bold.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWPalladioL-Bold.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Palladio L';
    font-style: 'italic';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/URWPalladioL-Ital.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWPalladioL-Ital.ttf')  format('truetype');
}

@font-face {
    font-family: 'URW Palladio L';
    font-style: 'normal';
    font-weight: '400';
    src: url('/and/assets/called/gs/webfonts/URWPalladioL-Roma.woff') format('woff'),
         url('/and/assets/called/gs/webfonts/URWPalladioL-Roma.ttf')  format('truetype');
}


</style>
    <h2 style="font-family: 'Nimbus Roman No9 L';" title="Nimbus Roman No9 L">Times</h2>
    <h2 style="font-family: 'Nimbus Sans L';" title="Nimbus Sans L">Helvetica</h2>
    <h2 style="font-family: 'URW Palladio L';" title="Palladio L">Palatino</h2>
    <h2 style="font-family: 'URW Bookman L';" title="Bookman">Bookman L</h2>
    <h2 style="font-family: 'URW Gothic L';" title="Gothic L">Avant Garde</h2>
    <h2 style="font-family: 'URW Chancery L';" title="Chancery L">Zapf Chancery</h2>
    <h2 style="font-family: 'Century Schoolbook L';" title="Century Schoolbook L">New Century Schoolbook</h2>
    <h2 style="font-family: 'Nimbus Mono L';" title="Nimbus Mono L">Courier</h2>
    <p>In short: We present a release of UFO source files for the Ghostscript fonts, a set of typefaces created to replace (and mimic) the proprietary typefaces present in the specification of Adobe PostScript. Download them as a zip, together with installable fonts, or <a href="https://github.com/fonts/ghostscript-fonts" style="" target="_self" title="fonts/ghostscript-fonts">fork them on GitHub</a>. Let me explain.</p>
    <h4>I want my generic medication</h4>
    <p>Like medication for which the patents have expired, popular typefaces sprout generic sisters and brothers. For Helvetica: Swiss 721, CG Triumvirate, Pragmatica, Nimbus Sans.</p>
    <p>All of this is possible because copyright protection on fonts is not very strong, especially in the United States. The thing that is copyrightable, though, is the series of points contained in an actual font file, i.e. the digital artefact that constitutes the typeface. That is why, in any End User License Agreement, the <a href="http://specimen.meteor.com/about#software" title="SPECIMEN :: A BLOG ON OPEN SOURCE FONTS">legal language refers always to the font as a program</a>: a program, as a series of written instructions, is copyrightable.</p>
    <h4>The DNA of the 1990ies</h4>
    <p>Desktop Publishing is what happened when personal computers got powerful enough to create layouts for print publications. If you want to find one document that represents the DNA of Desktop publishing, the <a href="http://partners.adobe.com/public/developer/ps/index_specs.html" target="_self" style="" title="Developer Resources: Adobe PostScript language specifications">Adobe Postscript specification</a> would be a good candidate. PostScript, as a language that describes page layouts, and the vector drawings and typefaces used in these layouts. In the late 1980ies, it is the glue that binds together layout programs such as Aldus Pagemaker, Adobe Illustrator and printers such as the Apple Laserwriter.</p>
    <p>In the 1990ies, virtually all graphic designers find themselves moving to the desktop computer. Yet even if its production has moved to the screen, the image of Graphic Design in the 1990ies is still tightly coupled to print. David Carson’s ‘Print is Dead’ is a book, not a website or a tv show. Designers make their name with magazines and record covers. And even if Truetype, a format developed by Apple &amp; Microsoft, makes a lot of progress in adapting vector typefaces for the screen, it is Emigre’s and Fontshop’s typefaces, designed for print and executed in PostScript, that seem to capture the design aesthetic of the era.</p>
    <p style="">It is also in this time that we see a number of auto-reflexive typefaces, that deal with the nature of the vector curve in general and PostScript in particular. Neville Brody’s <a href="https://www.fontfont.com/fonts/autotrace" target="_self" style="" title="FF Autotrace fonts from the FontFont Library">FF Autotrace</a> is a reflection of the passage from the analog to the digital, and more precisely, from raster to vector. Simulating the effect of a rushed automatic ‘vectorisation’ script on a bitmap of a Helvetica like grotesk, it is a meditation on the kind of transformations that are performed over and over again in the process of Desktop Publishing.<br style="" />An analogue drawing might first be scanned to get it into the computer, which produces a raster image, then transformed into vectors to be able to scale it in dimensions. To make the image visible though, it will need to be rasterised again, first on the screen of the designer, and finally by the printing device.</p>
    <p>Letterror dives into the very fabric of PostScript when creating <a href="http://letterror.com/fontcatalog/fontfont-beowolf/" target="_self" style="" title="FontFont Beowolf | LettError">FF Beowolf</a>, what they call a RandomFont. Just van Rossum and Erik van Blokland have added an extra command to the PostScript language: freakto. Instead of the more predictable curveto and moveto commands of regular PostScript, the points are slightly random. Letteror says ‘Beowolf demonstrated that digital fonts are data and code, and therefore instructions that can modify themselves.’. Pierre H. tells me, it used to get you banned from printshops (the PostScript execution taking place in the printer, printing a document in Beowolf takes significantly more time and computing resources then printing a regular document).</p>
    <p>It is only today, when every design agency also produces websites and mobile applications, PostScript has lost its position of the central language. When designing for the screen, a ‘page description language’ is not flexible enough. The defining language of today is probably the markup language HTML, which trades in the (typo)graphic precision of PostScript for the kind of flexibility screen based media require. The main standard for eBooks, ePUB, is based upon it.</p>
    <h4>The ghost in the shell</h4>
    <p>Every language needs interpreters. Early laser printers had their own PostScript interpreter, translating the vector image into a rasterisation. You also need an interpreter when you want to rasterise a PostScript document to the screen. A PostScript interpreter that is Free and Open Source (and who’s history also goes back to the 1980ies) is <a href="http://www.ghostscript.com/" style="" target="_self" title="Ghostscript: Ghostscript">Ghostscript</a>.</p>
    <p>As part of the specification for PostScript, Adobe specifies a set of 35 fonts each PostScript capable device should be able to handle. Because these typefaces are not available under an open source license, GhostScript has a problem creating a Linux version. The solution: the company developing GhostScript convinces the Hamburg based font design company URW to license a set of their generic typefaces under the GPL license:</p>
    <blockquote>The copyright holder of these fonts, URW++ Design and Development
Incorporated (the successor to the former well-known URW company), was
willing to release the fonts with the GPL and the AGFPL because they judged
(correctly in my opinion) that these particular fonts have become such a
commodity item, with such low profit margins, that the value to URW++ of
having URW++`s name widely visible and appreciated on the net is now greater
than the loss of profit from those future sales that the free licenses will
cause not to occur.</blockquote>
    <p class="byline">e-mail announcing the release of the Ghostscript fonts (<a href="http://web.archive.org/web/20021023155414/http://www.geocrawler.com/archives/3/378/1996/5/0/2064811/" target="_self" style="" title="Geocrawler.com - bug-ghostscript - Finally! Good-quality free (GPL) basic-35 PostScript Type 1 fonts.">via the Wayback machine</a>)</p>
    <p>If PostScript is the DNA of Desktop Publishing, these 35 fonts represent its typographic genes. Thus, while none of the fonts are extremely interesting in their own right, they form a great backdrop for showing procedural transformations on typefaces. Examples are OSP’s <a href="http://ospublish.constantvzw.org/foundry/notcouriersans/" style="" target="_self" title="OSP Foundry :: NotCourierSans">NotCourierSans</a> (chopping the serifs of the Nimbus Mono), <a href="http://ospublish.constantvzw.org/foundry/le-patin-helvete/" style="" target="_self" title="OSP Foundry :: Le Patin Helvète">Patin Helvète</a> (adding serifs to the Nimbus Sans) and <a href="http://ospublish.constantvzw.org/foundry/limousine/" style="" target="_self" title="OSP-foundry :: Limousine">Limousine</a> (attempting to maximally change the character of Nimbus Sans through minimal modifications). And it is because of the free and open source license of the GhostScript fonts, that these alterations and their redistributions are allowed.</p>
    <h4>What’s the fuss</h4>
    <p>You can get the original release of the <a href="http://sourceforge.net/projects/gs-fonts/" style="" target="_self" title="Ghostscript fonts | Free Graphics software downloads at SourceForge.net">Ghostscript Fonts on Sourceforge</a>. These are PostScript Type 1 fonts. If you want to continue building on them, the UFO font format is more suitable. That is why we prepared a release of all these font files in this format (an added convenience: less cryptic filenames). We see these fonts as finished, but there are some technical implementation details that could still be improved: you can find more info in the README.txt. More importantly, you might find ways to abuse them for your own ends—if you were formed in the 1990ies, PostScript is in your blood: and these are the fonts you will feel all Oedipal about.</p>
    <script>
$("h2").hover(
    function() {
        var urw = $(this).attr('title');
        var adobe = $(this).text();
        $(this).text(urw);
        $(this).attr('title', adobe);
    },
    function() {
        var adobe = $(this).attr('title');
        var urw = $(this).text();
        $(this).text(adobe);
        $(this).attr('title', urw);    }
)
</script>


        ]]>
    </content>
</entry>

<entry>
    <title>48 Hours of Writing Stylesheets with Etherpad and a Gong</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/48-hours-of-writing-stylesheets-with-etherpad-and-a-gong" />
    <id>tag:i.liketightpants.net,2013:/and//1.78</id>

    <published>2013-10-08T22:06:03+01:00</published>
    <updated>2013-11-10T18:17:13+01:00</updated>

    <summary>The screenshots  are from a period of 48 hours where we work on the site together. To write CSS, we keep a shared Etherpad. One person is in charge of the gong: when she rings, she copies the contents of the pad into the site’s CSS file, and uploads it—after which everyone can refresh their browser and see the updated styles.</summary>
    <author>
        <name>baseline</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <p>
      <iframe src="http://player.vimeo.com/video/65545530?color=000&amp;title=0&amp;byline=0&amp;portrait=0" width="830" height="466" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<!-- <video src="http://i.liketightpants.net/and/assets/called/live_coding_the_osp_website_1280x720.mp4" id="live-website-video" width="830" height="466" style="background: white;" preload controls>--><br></p>
    <p>A video of the redesign of the <a href="http://osp.constantvzw.org/" target="_self" style="" title="OSP (Open Source Publishing) →" class="aloha-link-text">OSP homepage</a>, from a traditional blog based site to a site that is used to communicate our design process in a ‘<a href="/and/release-early-release-often-version-numbers-for-typefaces" style="" target="_self" title="I like tight pants and release early release often version numbers for typefaces" class="aloha-link-text">release early, release often</a>’ manner: every time we add a file to our shared repository it shows up on our site.</p>
    <p style="">The screenshots above are from a period of 48 hours where we work on the site together. To write CSS, we keep a shared <a href="/and/etherpad-or-the-textarea-is-a-lonely-place" style="" target="_self" title="I like tight pants and etherpad or the textarea is a lonely place" class="aloha-link-text">Etherpad</a>. One person is in charge of the gong: when she rings, she copies the contents of the pad into the site’s CSS file, and uploads it—after which everyone can refresh their browser and see the updated styles.</p>
    <h4>Update 2013-11-10:</h4>
    <p style="">If you run a recent version of Etherpad, you can install&nbsp;<a href="https://github.com/codingisacopingstrategy/ep_export_less_and_css" class="" style="background-color: rgb(128, 181, 242);" target="_self" title="codingisacopingstrategy/ep_export_less_and_css">ep_export_less_and_css</a>, a plugin bnf created that enables CSS export directly from Etherpad.</p>

        ]]>
    </content>
</entry>

<entry>
    <title>Release Early Release Often Version Numbers For Typefaces</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/release-early-release-often-version-numbers-for-typefaces" />
    <id>tag:i.liketightpants.net,2013:/and//1.81</id>

    <published>2013-09-25T21:53:36+01:00</published>
    <updated>2013-11-11T13:13:43+01:00</updated>

    <summary>I love the way version numbers are used in Open Source. Version 1.0 is not the first version released. Projects are well underway before they reach 1.00—if they even reach it. An open source maxim (by Linus Torvalds of Linux fame) is ‘release early, release often’. Get your code out there before it is perfect, because it can benefit from collaboration from the community. That is why we see version numbers like 0.15.2</summary>
    <author>
        <name>tellyou</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <p>I love the way version numbers are used in Open Source. Version 1.0 is not the first version released. Projects are well underway before they reach 1.00—if they even reach it. An open source maxim (by Linus Torvalds of Linux fame) is ‘release early, release often’. Get your code out there before it is perfect, because it can benefit from collaboration from the community. That is why we see version numbers like 0.15.2</p>
    <p>Version 1.0 is reserved for the first version that sees the design intentions crystallised, the functionality in place, and all the first bugs accounted for. It’s what you would have wanted your first release to be like, except that it took all the releases in-between to get there:</p>
    <blockquote>We are very pleased to announce the release of IPython 1.0, nearly twelve years after the first release of IPython 0.0.1.</blockquote>
    <p>With the Open Baskerville project, we try to use this logic on a typeface. This is a screen shot showing the metadata of our most recently released font:</p>
    <p>
      <img style="height: 365px; width: 750px; position: relative; margin: 0px; resize: none; zoom: 1; display: inline-block; top: 0px; left: 0px;" src="/and/assets/called/openbaskerville_metadata.png" title="" class="">
</p>
    <p class="byline">Version information for the latest Open Baskerville Release (generated from UFO by a script calling FontForge).</p>
    <p style="">As you can see, we put the version number right in the font name. This has a practical reason: if there are going to be multiple versions, better make sure the user can tell them apart. But there is also a philosophical reason—we want to make it clear up front that our typeface is developed in an iterative way.</p>
    <h4>Iterations in the industry</h4>
    <p style="">Typefaces are not usually developed through release early, release often. When a designer or a foundry releases a typeface, it is usually considered finished: sometimes new technological developments warrant a new release, like when fonts first got released as OpenType, or now with the release of webfonts. The constant stream of updates as we know it from software teams is absent from type face development, even though most <a href="http://specimen.meteor.com/about#software" target="_self" style="" title="SPECIMEN">foundries refer to their work as software</a>.</p>
    <p style="">There are cultural reasons for this. One is that the industry of type design has until now not really embraced the malleability of digital typography. <a href="http://ospublish.constantvzw.org/blog/typo/appropriation-and-type-before-and-today" style="" target="_self" title="Appropriation and Type – before and today">Ricardo Lafuente asks</a>: why are people who make and sell typefaces still referring to themselves as foundries, as if they are still producing shapes cast in lead?<br>There are also practical reasons: once one has made a layout with a typeface, one does not usually want it to change—especially in the width of the letters and their spacing—as it would change the layout in unpredictable ways.</p>
    <p style="">But the ideas in the Free Software and open source movements have found their way into the larger field of culture. Libre fonts—typefaces released as open source—have been a large success in recent years, thanks in no small part to web typography, where for a long time most traditional fonts could not be used because of licensing restrictions. But in the way in which they have are made, the fonts offered on sites such as the Open Font Library and Google Web Fonts do not really offer any innovation over the existing foundry model. They are mostly released by individual authors as a finished package. Projects that think about setting up a framework for collaboration and iterative development are rare—what is telling is that it is often not clear how to contribute back a change to the font.</p>
    <p style="">This means libre typography is in a hairy spot. Even if conventional type foundries celebrate a personality focused idea of type design, the actual production takes place in tightly coordinated teams: the type designer can count on other designers to help him flesh out the alphabet, and foundries often reach out to specialists when it comes to specific areas of type design such as kerning and hinting. Individual designers working with free licenses will not be able to match these teams on production quality if they work by themselves.&nbsp;</p>
    <p style="">To me it is clear that if libre typography wants to distinguish itself from its traditional counterpart, it needs to embrace alternative conceptions of type design. This can be by focusing on the possibilities of appropriation, remixing and forking of existing typefaces.&nbsp;<a href="http://ospublish.constantvzw.org/workshop/write-me-a-shadow/" style="" target="_self" title="Write me a shadow. OSP @ ESAD Valence">Manipulating existing typefaces</a>, either manually or through <a href="/and/programmatically-manipulating-typefaces" style="" target="_self" title="I like tight pants and programmatically manipulating typefaces">scripts</a>, is only allowed only with libre fonts: the End User License Agreements of most typefaces explicitly forbid modification. Or it can be by embracing new collaboration methods and iterative processes, like we try to do with Open Baskerville.</p>
    <h4>How we collaborate on Open Baskerville</h4>
    <p style="">It is clear that the right tools for typographic collaboration <a href="/and/the-most-barebones-online-font-editor-possible" style="" target="_self" title="I like tight pants and the most barebones online font editor possible">still need to be built</a>. But like I explain in <a href="/and/how-it-has-come-about-that-code-hosting-site-github-offers-visualisations-of-typeface-development" style="" target="_self" title="I like tight pants and how it has come about that code hosting site github offers visualisations of typeface development">I like tight pants and how it has come about that code hosting site github offers visualisations of typeface development</a>,&nbsp;some elements of the underlying system are already showing up. The open&nbsp;<span style="font-size: 14px;">font format UFO and the versioning process Git are a solid basis to built on.</span></p>
    <p style=""><span style="font-size: 14px;"></span>A collaborator on Open Baskerville needs to have an account on Github and the software <a href="http://git-scm.com/" style="" target="_self" title="Git">Git</a> installed on ones computer. She first ‘forks’ <a href="https://github.com/klepas/open-baskerville/" target="_self" style="" title="klepas/openbaskerville">our repository</a> to her Github account: she now has her own version of the revision history. This fork she ‘clones’ to her own computer, using git.</p>
    <p style="">The clone consists of all the files of the project, plus the version history. She now goes and makes changes in the files. When she is happy with the changes, she ‘commits’ them, and ‘pushes’ them back up to her Github repository. She opens a ‘pull request’ where she asks for the changes to be merged into our repository.</p>
    <p style="">This is a rather involved process. Outside of software developers, not many people have experience with Git.&nbsp;<span style="font-size: 14px;">The existing interfaces to Git are not intuitive to use, being geared to programmers directly editing source files rather than designers using a graphical tool. I think the complexity of this process is one of the barriers to contribution on our project.</span></p>
    <p style=""><span style="font-size: 14px;">It will be much more easy to contribute to Open Baskerville once there exist more easy ways to handle the version control. Whether in the form of plugins for font-editors, or a new editor built around collaboration.</span></p>
    <p style=""><span style="font-size: 14px;">What will stay the same in the future is the access we have to the revision history, as tracked in Git. In Open Baskerville, we use a set of scripts to be able to quickly generate a font package for each revision: <a href="https://github.com/fonts/skeleton" style="" target="_self" title="fonts/skeleton">we packaged them for other projects to use</a>.</span></p>
    <h4>Formalising version numbers</h4>
    <p>In computer software the&nbsp;<a href="http://semver.org/" target="_self" title="Semantic Versioning 2.0.0" style="font-size: 14px;">Semantic Versioning</a>&nbsp;standard is an attempt to formalise generally accepted practices for attributing version numbers.</p>
    <p>It distinguishes between MAJOR, MINOR and PATCH versions, corresponding to three period separated numbers: MAJOR.MINOR.PATCH (i.e. version 1.5.4) What is the difference between these categories? From Semantic Versioning’s specification, the guideline as to when to augment the MAJOR, MINOR and PATCH versions:</p>
    <blockquote>
      <ol>
        <li style="font-size: 14px;">MAJOR version when you make incompatible API changes,</li>
        <li style="font-size: 14px;">MINOR version when you add functionality in a backwards-compatible manner, and</li>
        <li style="">PATCH version when you make backwards-compatible bug fixes.<br style=""></li>
</ol>
</blockquote>
    <p>This makes the distinction between how a program is used and how it works on the inside. Changes to the code implementation that don’t change how the program appears to the user, merit only a change in the PATCH version. Adding functionality that appears to the user, without changing existing functionality, merits a MINOR version. Finally, changing the way in which you as a user have to use the program, means updating the MAJOR version.</p>
    <p>However, this model does not seem really applicable to type design. This is because every change in the code, influences the visual product with which the designer works. My poster design might break more spectacularly if the fonts metrics change, by messing with my line breaks: but if the axis by which the bar of the e is slanted changes, that does ‘break’, in a more subtle way, my design as well.</p>
    <p></p>
    <p>This means that for fonts, unlike in software, every version is functionally different.&nbsp;<span style="font-size: 14px;">Another reason why we chose to feature the version number prominently in the name of the typeface.</span></p>
    <h4>What the version means</h4>
    <p>Resuming the role of version numbers in Open Source, we have seen both the&nbsp;<span style="font-size: 14px;">way in which a version number talks about the mindsets and the aims of a project, and</span><span style="font-size: 14px;"> the more formalistic definition of Semantic Versioning.</span></p>
    <p>It is the metaphor of the long road to the first version that I find the most easily applicable to design projects. Every project start with a set of goals, aspirations, challenges. In the context of design, I would then rephrase the different types of version numbers as such:</p>
    <ol style="font-size:14px;line-height:18px;">
      <li>MAJOR version constitutes a coherent set of design goals,</li>
      <li>MINOR version constitutes a discrete goal obtained in pursuing these design goals and</li>
      <li>PATCH version constitutes incremental progress toward design goals.</li>
</ol>
    <p style="">For example, in Open Baskerville, the major design goal is to recreate Fry’s Baskerville in a way that is usable on the modern web (Version 1.0). As a sub-goal, we are first working to recreate a width faithful to Fry’s surviving specimen (version 0.1), with a system in place to create releases. We logged 83 incremental improvements towards this goal, but we are not there yet (thus, at version 0.0.83).</p>
    <p style="">If we ever reach 1.0, what then? Can we think of a new major design goal for the project, or rephrase its design goal? We might want to re-inspire ourselves on other Baskerville variants, for example, and adjust are goals accordingly.<br style="">Where does it end? What is the final number? Is continuing working on one design project for years and years a desirable scenario, in a way that Windows now is at version 8 and Illustrator at version 16?</p>
    <p style="">There are arguments against creating too many versions of a design. A design is a product of hopes, aspirations, goals and constraints that exist at a given point. The recent phenomenon of film directors revisiting their older movies and adding contemporary computer effects (not available at the time) has not at all been well received by fans. It shows that the constraints placed upon an artistic project shape it and create its character, and that authors might want to be reticent in revisiting their works.</p>
    <p style="">Similar phenomenons exist in software too. People who use many subsequent versions of &nbsp;a software often feel like something gets lost along the way. The initial sense of purpose embodied in a program can give way to what is called ‘bloat’, by adding feature upon feature until it tries . In programmer’s circles, this is known as Zawinski’s law: &nbsp;‘Every program attempts to expand until it can read e-mail.’ At the same time, using old versions of software is not very practical. They might contain security holes; they might even no longer run on your current operating system.</p>
    <p style="">With typefaces we are in luck that they will in most occasions be usable for a longer time. As long as a description of its points exists somewhere—and mankind does not forget <a href="/and/seb-explaining-love-and-bezier-curves" style="" target="_self" title="I like tight pants and seb explaining love and bezier curves" class="aloha-link-text">the mathematics of Bézier curves</a>. So I think I will want for the 1.0 version to be the last. Anyone who has another vision on the design, is <a href="/and/no-one-starts-from-scratch-type-design-and-the-logic-of-the-fork" class="" style="" target="_self" title="I like tight pants and no-one starts from scratch: type design and the logic of the fork">free to fork</a>.</p>

        ]]>
    </content>
</entry>

<entry>
    <title>The Story of Nokia, Microsoft and a 1000 Hearts Breaking</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/the-story-of-nokia-microsoft-and-a-1000-hearts-breaking" />
    <id>tag:i.liketightpants.net,2013:/and//1.68</id>

    <published>2013-09-04T22:02:55+01:00</published>
    <updated>2013-09-04T19:09:15+01:00</updated>

    <summary>In the upper part of the screen you see a smartphone. A landscape format screen with a keyboard slid out underneath. The screen is scratched and there are stains of white paint all over the device. The phone appears to be floating. A tale of Nokia, Microsoft, and a 1000 hearts breaking.</summary>
    <author>
        <name>tellyou</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <p><a href="/and/assets/called/the_telephone.jpg" target="_self">
        <img src="/and/assets/scaled/to/830/wide/and/called/the_telephone.jpg" style="height:830px;width:830px;" alt="In the upper part of the screen you see a smartphone. A landscape format screen with a keyboard slid out underneath. The screen is scratched and there are stains of white paint all over the device. The phone appears to be floating." title="" />
      </a></p>
    <p class="byline">A Nokia N900</p>
    <p>In the wake of <a href="http://www.microsoft.com/en-us/news/press/2013/sep13/09-02AnnouncementPR.aspx" style="" target="_self" title="Microsoft to acquire Nokia’s devices &amp; services business, license Nokia’s patents and mapping services">Microsoft’s acquisition of Nokia</a>, here is a tale of a telephone an a 1000 programmer’s hearts breaking. It starts when I am on the lookout for a new phone. A phone that is a little computer that can run all kinds of applications I can install myself—a smart phone. Since I like my new found ways of writing scripts and <a href="/and/absolute-beginners-unix-for-art-students-part-1" target="_self" style="" title="I like tight pants and absolute beginners: unix for art students – part 1">getting intimate with the terminal</a>, I am looking for a telephone that resembles the UNIX systems I know.</p>
    <p>I have also learned to write Python. I know how to use it to make web applications, and it seems to be <a href="http://arstechnica.com/information-technology/2009/07/how-to-build-a-desktop-wysiwyg-editor-with-webkit-and-html-5/" style="" target="_self" title="How to build a desktop WYSIWYG editor with WebKit and HTML 5 | Ars Technica">reasonably easy</a> to create desktop applications. But when creating applications for smartphones, the two most popular phone operating systems have their own way of doing things, using different languages: Objective C on the iPhone, Java on the Android. Big companies like Apple and Google prefer to create their own way of doing things, and call it a platform—which, in the words of Eben Moglen means: <a href="http://www.softwarefreedom.org/events/2010/isoc-ny/FreedomInTheCloud-transcript.html" style="" target="_self" title="Freedom In the Cloud - Software Freedom Law Center">places you can’t leave</a>.&nbsp;</p>
    <p style="">The Nokia N900 then seems to offer an alternative. It runs the <a href="http://en.wikipedia.org/wiki/Maemo" target="_self" style="" title="Maemo - Wikipedia, the free encyclopedia">Maemo</a> operating system, that shares with Android its Linux core, but reuses much more of Linux’s graphical model. It should allow me to reuse my new found knowledge of the Unix platform and its programming languages—like the Python one I have just been learning:</p>
    <blockquote class="">&nbsp;27 minutes to get a basic app running; an afternoon (most of it spent doing other stuff while stuff downloaded) to get the full development environment (with emulator) up and running. Simply excellent. The N900 really is a very good platform for development work, especially with Python.<br /></blockquote>
    <p class="byline"><a href="http://web.archive.org/web/20130615004412/http://www.stochasticgeometry.ie/2010/04/29/python-on-the-nokia-n900/" target="_self" style="">Source</a></p>
    <p style="">In a similar vein, whereas most telephones are locked down by default, requiring some kind of ‘jailbreak’ procedure to allow to install any software, the Nokia has no such restrictions—it even comes with a Terminal program by default.<br />As I scour the internet figuring out how it works to jailbreak the latest generation of iPhone, I come across seedy forums with adolescents shouting homophobic abuse at each other, and I figure I would rather be part of a more positive ecosystem—I order the Nokia.</p>
    <p style="">It works out quite nicely. I like using the phone; the full QWERTY keyboard makes for great note taking and texting. Though I never get to any programming beyond installing the <a href="http://ipython.org/" style="" target="_self">IPython</a> shell, there is an actual pleasure in the feeling that I could, whenever I would want to. Finally, I profit from a great build quality, which sees my phone survive falling into a bucket of paint.<br />The great downside to the phone, are caused by the simple fact of it being not very popular. As it does not represent a sizable number of All the new applications that appear are for iPhone and Android. Apparently, having a phone that you can easily fiddle with yourself, is not what gets users flocking to the device. I feel a little lonely using this operating system.<br />Yet at <a href="http://" target="_self" style="" title="I like tight pants and daniela likes open source programming conferences like fosdem">Fosdem 2011</a>, a yearly event for Open Source software developers, it turns out everybody has this phone. I speak with the community manager for the largest Maemo website, who speaks with great enthousiasm about this community. I remember that <a href="http://drippingdigital.com/blog/" style="" target="_self" title="Dripping Digital">John</a> has this phone, and <a href="http://adaptstudio.ca/" style="" target="_self" title="ad.apt is ginger coons">Ginger</a> too. For a moment it feels like the people needed for the platform to have a future, are there.</p>
    <p><span style="font-size: 14px;">Yet companies only work with open source as long as they can make open source work for them. ‘The most open’, by itself, is not easily translatable into market share.&nbsp;</span>Two days later, as I get home, I read that <a href="http://conversations.nokia.com/2011/02/11/open-letter-from-ceo-stephen-elop-nokia-and-ceo-steve-ballmer-microsoft/" target="_self" style="" title="Open Letter from CEO Stephen Elop, Nokia and CEO Steve Ballmer, Microsoft – Nokia Conversations : the official Nokia blog">Nokia has signed a deal to continue with Microsoft Windows as the operating system for its smartphone</a>. It is like I hear a thousands programmers’ hearts collectively break.</p>


        ]]>
    </content>
</entry>

<entry>
    <title>It Might Be a Unix Sin But I Would Like You to Add .txt As the Extension of Your README file</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/it-might-be-a-unix-sin-but-i-would-like-you-to-add-dot-t-x-t-as-the-extension-of-your-readme-file" />
    <id>tag:i.liketightpants.net,2013:/and//1.65</id>

    <published>2013-04-30T21:51:20+01:00</published>
    <updated>2013-04-30T20:10:13+01:00</updated>

    <summary>Who are these people in Boston? Why do they ask me to write them letters in the day and age where I download their software from the internet? And why didn’t they add .txt to the end of their filenames?</summary>
    <author>
        <name>bnf</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <p><a href="https://github.com/klepas/open-baskerville/commit/8aaf5c54eb0c88cdbdfe2411e5f7396a88d0ab89">
        <img src="/and/assets/called/this_is_probably_a_unix_sin.png" style="width:660px;height:401px" alt="" title="" />
      </a></p>


        ]]>
    </content>
</entry>

<entry>
    <title>Etherpad Or The Textarea Is A Lonely Place</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/etherpad-or-the-textarea-is-a-lonely-place" />
    <id>tag:i.liketightpants.net,2013:/and//1.75</id>

    <published>2013-04-22T21:59:54+01:00</published>
    <updated>2013-04-27T14:00:02+01:00</updated>

    <summary>It is a lonely place. The other I like tight pants contributors are nowhere in sight, it is just me typing away in the browser.</summary>
    <author>
        <name>tellyou</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <p><a href="/and/assets/called/the_lonely_form_field.png">
        <img src="/and/assets/scaled/to/830/wide/and/called/the_lonely_form_field
.png" alt="" title="" />
      </a></p>
    <p></p>
    <p>This is where I type my entries. It is a lonely place. The other I like tight pants contributors are nowhere in sight, it is just me typing away in the browser. Only when I hit a submit button the information is sent to the server.</p>
    <p>Were my colleagues to try and edit this article at the same time, the system would not allow it. Content management systems put in place editing locks, allowing only one user to edit at a time. This is because the text form I write in can not be updated while I am editing it. So if other users were allowed to update the entry inbetween the time that I open the text field and the moment I press the submit button, their changes would effectively be overwritten. Wikipedia employs a sophisticated merging tool to merge various edits together.</p>
    <p>Baseline, who works with OSP, has introduced me to <a href="http://etherpad.org/" class="" target="_self" style="" title="Etherpad lite">Etherpad</a>. Etherpad presents you with an online document allowing you to start typing. As you do, you might see others connected to the pad start typing as well. There is no submit button. Everything is saved while you type so that it can be shown to your collaborators at the same time. You are no longer solitary with your text box:</p>
    <p><a href="/and/assets/called/osp_using_etherpad.png">
        <img src="/and/assets/scaled/to/830/wide/and/called/osp_using_etherpad.png" alt="" title="" style="width:830px;height:623px;" />
      </a></p>
    <p>Once you have used Etherpad to write, it becomes difficult to imagine writing collaboratively without it. In a book sprint in Rotterdam, we used <a href="http://www.booki.cc/" class="" target="_self" style="" title="Booktype">Booki</a>, which allows for sophisticated pdf and ebook creation. Yet like many content editing tools it imposes a single-user content lock on each chapter. At the end of the session it turned out everyone had used Etherpad to write their chapters together, before copy and pasting it into the Booki platform.</p>
    <p>If you have not used etherpad, changes are you have used the technology through Google Docs. It is Google who in 2009 bought Etherpad. At the time of the acquisition the source code gets released under a permissive license. So if the code is out there, why are we not seeing more Etherpad-style collaboration online?</p>
    <p></p>


        ]]>
    </content>
</entry>

<entry>
    <title>The Most Barebones Online Font Editor Possible</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/the-most-barebones-online-font-editor-possible" />
    <id>tag:i.liketightpants.net,2013:/and//1.74</id>

    <published>2013-04-18T21:59:36+01:00</published>
    <updated>2013-04-18T12:08:42+01:00</updated>

    <summary></summary>
    <author>
        <name>baseline</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <p><a href="/and/assets/called/edit_glif.png">
        <img src="/and/assets/scaled/to/830/wide/and/called/edit_glif.png" alt="You see a fairly minimalistic user interface featuring a list of what appears to be glyph names, a large letter A, and a textarea with xml data describing two contours—the contours that make up the A. The elements lack the usual gloss of post OS-X user interfaces: a thin grey 1px border is the only visual separator between elements." title="" />
      </a></p>
    <p>Built by OSP as part of a <a href="http://osp.constantvzw.org/workshop/pzi/" target="_self" style="" title="OSP (Open Source Publishing) → you&amp;#39;re traveling toward in pzi">workshop</a> where students of the Piet Zwart Institute get up close and personal with vector graphics. You edit the raw XML strings that make up the <a href="http://unifiedfontobject.org/versions/ufo2/glif.html" target="_self" style="" title="Unified Font Object - Version 2 - GLIF format">glif</a>.&nbsp;</p>
    <p>An online font-editor would be a great way to make it more easy to do <a href="/and/how-it-has-come-about-that-code-hosting-site-github-offers-visualisations-of-typeface-development" style="" target="_self" title="I like tight pants and how it has come about that code hosting site github offers visualisations of typeface development">collaborative type design</a>. Speaking with <a href="https://www.google.com/search?q=dave+crossland" target="_self" style="" title="Dave Crossland">Dave</a> at this years Libre Graphics Meeting, we figured that a good place to get started would be to have a library that makes it more easy to deal with typefaces in web-apps—a JavaScript port of <a href="http://www.robofab.org/" target="_self" style="" title="I like tight pants and programmatically manipulating typefaces">RoboFab</a> perhaps?</p>


        ]]>
    </content>
</entry>

<entry>
    <title>Belgian Newspapers</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/belgian-newspapers" />
    <id>tag:i.liketightpants.net,2013:/and//1.67</id>

    <published>2013-03-29T22:17:00+01:00</published>
    <updated>2014-05-12T00:13:43+01:00</updated>

    <summary>This computer, inside the Belgian Royal Library, has no access to internet, no usb ports, and no connection to a printer. It shows you a digital version of a Belgian newspaper, Le Drapeau Rouge.</summary>
    <author>
        <name>habitus</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <p>
      <img src="/and/assets/called/belgian_newspaper_le_drapeau_rouge.jpg" alt="You see a computer monitor, in portrait orientation, showing the front page of a newspaper (displayed as a PDF inside Internet Explorer): ‘Le drapeau rouge’, the Belgian daily communist newspaper. Headline: ‘Molotov propose la réduction générale des armements’. " title="" style="width:1029px;height:1457px;margin-left:-199px;z-index:-1111;">
</p>
    <div style="margin-left:50px;margin-top: -138px;">
      <p>This computer is situated in Belgium’s Royal Library. It offers you access to an internal network of 300.000 pages of Belgian periodicals, produced between 1831 an 1945.&nbsp;<span style="font-size: 14px;">It has no access to internet, no usb ports, and no connection to a printer.</span></p>
      <p><span style="font-size: 14px;">If the library allows any digital distribution of the materials outside of the library walls they risk claims of copyright holders.</span></p>
      <p>During&nbsp;<a href="http://www.kbr.be/actualites/domaineDomein/domainePublic.html" title="Bibliothèque royale de Belgique : Fêtons le Domaine Public" style="">Public Domain Day</a> (<a href="http://www.kbr.be/actualites/domaineDomein/publiekDomein.html" title="Koninklijke Bibliotheek van België :Gelukkig Publiek Domein!">NL</a>) <span style="font-size: 14px;">Librarian Marc D'Hoore explains: determining the authorship of a newspaper is difficult. Much of the work is anonymous or pseudononymous. There are not always clear contracts between the publishers and the authors. You do not know who owns the copyright, and you do not know when it will pass into the public domain.</span></p>
      <p>Because of its mission of preservation, the Library needed to scan these materials—the paper is of extremely poor quality and disintegrating. But the Library also has a mission to facilitate access to its materials in any way it can.</p>
      <p>Digitalisation seems to offer a great potential to make the material from the collections more accessible. Once scanned, material can be indexed, and put online, and be available to everyone with an internet connection. In potential. In reality, the Royal Library can not do this, because it would open itself to all kinds of claims of damages by copyright holders.</p>
</div>

        ]]>
    </content>
</entry>

<entry>
    <title>Parties in Paris</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/parties-in-paris" />
    <id>tag:i.liketightpants.net,2012:/and//1.53</id>

    <published>2012-09-07T15:24:25+01:00</published>
    <updated>2013-03-04T00:29:48+01:00</updated>

    <summary>There is never much programming at the parties I go to. Seb says people like drugs and music and sex and that’s what brings them to parties.</summary>
    <author>
        <name>glit</name>
    </author>
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
        
    <p><a href="http://i.liketightpants.net/and/assets/called/parties_in_paris.jpg">
        <img src="http://i.liketightpants.net/and/assets/scaled/to/830/wide/and/called/parties_in_paris.jpg" style="width:553px;830px;" title="" alt="You see a young man perched against a dresser, sitting on a medicine ball. He looks away. He is wearing a slate blazer, over a yellow shirt, screenprinted with a drawing of his guts and his chestcage. He wears gold colored leggings. His hair is combed over to the left." />
      </a></p>
    <p class="byline">Photo Laura Barbare</p>
    <p>Or parties in Brussels, for that matter. But the alliteration is nice.</p>
    <p>Though there is never much programming at the parties I go to. Even if <a href="http://yaxu.org/" title="http://yaxu.org/">Alex McLean</a> professes to be <a href="http://www.perl.com/pub/2004/08/31/livecode.html" title="Hacking Perl in Nightclubs - Perl.com">hacking Perl in night clubs</a>, I have yet to run into him at night.</p>
    <p>I am wondering at what point it will become part of contemporary party culture and we’ll have live coding sessions at <a href="http://www.flashcocotte.com/" title="Flash Cocotte">Flash Cocotte</a>? Seb tells me that it’s not likely to happen. That people like <a href="/and/designer-drugs">drugs</a> and music and sex and that’s what brings them to parties. And that programming is too abstract and intellectual to appeal to people in a similar way.</p>
    <p>What do you think?</p>


        ]]>
    </content>
</entry>

</feed>