<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>I like tight pants and mathematics</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/" />
    <link rel="self" type="application/atom+xml" href="http://i.liketightpants.net/and/feed/us/recent_entries.xml" />
    <id>tag:i.liketightpants.net,2010-05-27:/and//1</id>
    <updated>2013-03-29T22:44:06Z</updated>
    
    <generator uri="http://www.sixapart.com/movabletype/">Melody 1.0.0</generator>

<entry>
    <title>Belgian Newspapers</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/belgian-newspapers" />
    <id>tag:i.liketightpants.net,2013:/and//1.67</id>

    <published>2013-03-29T21:17:00Z</published>
    <updated>2013-03-29T22:44:06Z</updated>

    <summary>This computer, inside the Belgian Royal Library, has no access to internet, no usb ports, and no connection to a printer. It shows you a digital version of a Belgian newspaper, Le Drapeau Rouge.</summary>
    <author>
        <name>habitus</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[<p><img src="/and/assets/called/belgian_newspaper_le_drapeau_rouge.jpg" alt="You see a computer monitor, in portrait orientation, showing the front page of a newspaper (displayed as a PDF inside Internet Explorer): ‘Le drapeau rouge’, the Belgian daily communist newspaper. Headline: ‘Molotov propose la réduction générale des armements’. " title="" style="width:1029px;height:1457px;margin-left:-199px;z-index:-1111;"></p>

<div style="margin-left:50px;margin-top: -138px;">
<p>This computer is situated in Belgium’s Royal Library. It offers you access to an internal network of 300.000 pages of Belgian periodicals, produced between 1831 an 1945.&nbsp;<span style="font-size: 14px;">It has no access to internet, no usb ports, and no connection to a printer.</span></p><p><span style="font-size: 14px;">If the library allows any digital distribution of the materials outside of the library walls they risk claims of copyright holders.</span></p><p>During&nbsp;<a href="http://www.kbr.be/actualites/domaineDomein/domainePublic.html" title="Bibliothèque royale de Belgique : Fêtons le Domaine Public" style="">Public Domain Day</a> (<a href="http://www.kbr.be/actualites/domaineDomein/publiekDomein.html" title="Koninklijke Bibliotheek van België :Gelukkig Publiek Domein!">NL</a>) <span style="font-size: 14px;">Librarian Marc D'Hoore explains: determining the authorship of a newspaper is difficult. Much of the work is anonymous or pseudononymous. There are not always clear contracts between the publishers and the authors. You do not know who owns the copyright, and you do not know when it will pass into the public domain.</span></p><p>Because of its mission of preservation, the Library needed to scan these materials—the paper is of extremely poor quality and disintegrating. But the Library also has a mission to facilitate access to its materials in any way it can.</p><p>Digitalisation seems to offer a great potential to make the material from the collections more accessible. Once scanned, material can be indexed, and put online, and be available to everyone with an internet connection. In potential. In reality, the Royal Library can not do this, because it would open itself to all kinds of claims of damages by copyright holders.</p>
</div> ]]>
        
    </content>
</entry>

<entry>
    <title>Parties in Paris</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/parties-in-paris" />
    <id>tag:i.liketightpants.net,2012:/and//1.53</id>

    <published>2012-09-07T13:24:25Z</published>
    <updated>2013-03-03T23:29:48Z</updated>

    <summary>There is never much programming at the parties I go to. Seb says people like drugs and music and sex and that’s what brings them to parties.</summary>
    <author>
        <name>glit</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
    
    
    
    
    
    
    
    <p><a href="http://i.liketightpants.net/and/assets/called/parties_in_paris.jpg"><img src="http://i.liketightpants.net/and/assets/scaled/to/830/wide/and/called/parties_in_paris.jpg" style="width:553px;830px;" title="" alt="You see a young man perched against a dresser, sitting on a medicine ball. He looks away. He is wearing a slate blazer, over a yellow shirt, screenprinted with a drawing of his guts and his chestcage. He wears gold colored leggings. His hair is combed over to the left."></a></p>

<p class="byline">Photo Laura Barbare</p>

<p>Or parties in Brussels, for that matter. But the alliteration is nice.</p>

<p>Though there is never much programming at the parties I go to. Even if <a href="http://yaxu.org/" title="http://yaxu.org/">Alex McLean</a> professes to be <a href="http://www.perl.com/pub/2004/08/31/livecode.html" title="Hacking Perl in Nightclubs - Perl.com">hacking Perl in night clubs</a>, I have yet to run into him at night.</p>

<p>I am wondering at what point it will become part of contemporary party culture and we’ll have live coding sessions at <a href="http://www.flashcocotte.com/" title="Flash Cocotte">Flash Cocotte</a>? Seb tells me that it’s not likely to happen. That people like <a href="/and/designer-drugs">drugs</a> and music and sex and that’s what brings them to parties. And that programming is too abstract and intellectual to appeal to people in a similar way.</p>

<p>What do you think?</p>
    
    
    
    
    
    
    
    
    
    
    
    
    
    ]]>
        
    </content>
</entry>

<entry>
    <title>How it Has Come About That Code Hosting Site Github Offers Visualisations of Typeface Development</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/how-it-has-come-about-that-code-hosting-site-github-offers-visualisations-of-typeface-development" />
    <id>tag:i.liketightpants.net,2012:/and//1.52</id>

    <published>2012-08-04T18:28:42Z</published>
    <updated>2012-12-25T22:33:19Z</updated>

    <summary>That&apos;s really cool that you guys are pushing for open source collaborative development of typefaces. I thought it was so cool that I stayed up late last night and hacked together some very simple UFO support on GitHub.</summary>
    <author>
        <name>tellyou</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[<style>
@font-face {
    font-family: 'Chunkfive';
    src: url('/and/assets/called/Chunkfive-webfont.eot#') format('eot'),
         url('/and/assets/called/Chunkfive-webfont.woff') format('woff'),
         url('/and/assets/called/Chunkfive-webfont.ttf') format('truetype'),
         url('/and/assets/called/Chunkfive-webfont.svg#webfontM8M0EYs2') format('svg');
    font-weight: bold;
    font-style: normal;
}
.notwork {
    font-family: 'Chunkfive';
    color: #FF00AE;
    font-weight: bold;
    margin: 0;
}
h2.notwork {
    margin-top: 18px;
    font-size: 32px;
    line-height: 32px;
}
h3.notwork {
    font-size: 16px;
    line-height: 16px;
}
</style>

<h2 class="notwork">It doesn’t work!</h2>
<h3 class="notwork">Github appears to have recently pulled this feature.</h3>

<a href="https://github.com/klepas/open-baskerville/commit/559794180adbdd65327558886d3f4e4169539284" title="Fixed some youthful mistakes, tweaked a few curves. ÃÂ·  5597941 ÃÂ· klepas/open-baskerville"><img src="/and/assets/scaled/to/830/wide/and/called/github_ufo_visual_diff.png" alt="You see two versions of a ¢ character: to the left, labelled ‘old’, a version with an upright bar, to the right, labelled ‘new’, a version with a slanted bar." title="" style="width:830px;height:329px;"></a>

<blockquote>That's really cool that you guys are pushing for open source collaborative development of typefaces. I thought it was so cool that I stayed up late last night and hacked together some very simple UFO support on GitHub.</blockquote>

<p class="byline">Tom Werner</p>

<p>With habitus waxing lyrically about the potential of reuse and collaboration in open source type design, I figure it is a good moment to zoom in on the details of a specific font collaboration project. Because it is not self evident how to go about working together on a font.</p>

<p>Together with <a href="http://klepas.org/" title="Simon Pascal Klein&thinsp;&mdash;&thinsp;Graphic &amp; web design professional">, I lead the open source font project Open Baskerville.</p>

<p>When setting up the project, Pascal has made some clever choices. Firstly, he provides an attractive looking <a href="http://klepas.org/openbaskerville/" title="Open Baskerville">website</a> that explains the project, and links to the source files. Then, he has put the <a href="https://github.com/klepas/open-baskerville/">source files on GitHub</a>, a code sharing site usually used for the development of software code. GitHub offers tools and practices for versioning files and sharing changes, that can be leveraged for this project. Another good move by Pascal: he does not put the Fontlab file online. Instead, he converts the font to an open file format called <a href="http://unifiedfontobject.org/" title="Unified Font Object">UFO</a>. A ufo file is actually a folder, that represents the typeface as a whole lot of plain text files, exactly the kind of file that is easily shared and processed through tools like GitHub, and readable by both the popular proprietary font editors and the open source font editor FontForge</p>

<p>When I come across the project, I ask my friend <a href="http://robmientjes.nl/" title="Hand-crafted pixels and top-shelf touch interfaces by Rob Mientjes">Rob</a> to explain to me what GitHub is. It is a code hosting site that focuses on facilitating the collaboration between developers.</p>

<p>Rob also explains to me that GitHub is built upon <a href="http://git-scm.com/">Git</a>. At the time one of the few human beings with the overlapping skill sets of knowing how to use Git and how to design type, Rob teaches me the basics of git in the cafeteria of the art school. Git is built upon an amazing premise: while traditional development is based on centralised repositories, Git’s development model is distributed. Every clone of a repository becomes a bona fide repository in itself. Whichever repository is the main one is but a social convention. Git turns the traditional model on his head, and makes the development of software much more akin to the development of culture: a distributed, abundant process.</p>

<p>Ever since I have been working on Open Baskerville, trying not just to make a good font, but to come up with workflows that can be re-used for other open font projects. On the level of workflow, we still have a long way to go before typographic collaboration is easily accessible. The git system used to track the changes on Open Baskerville is developed for programming code and is therefore not always easy to use for designers. But the underlying foundation is very solid, and it plays together well with the UFO format. Because Git and UFO are open, it is well imaginable that a plugin can be written for a font-editor that interfaces with git, so that you can track your changes in the font editor, end send them back to the repository that you pulled the font from.</p>

<p>One feature that I figure to be fundamental to be able to convince other designers of the potential of a git-based workflow is a visualisation of the typeface and the changes being made to it. I have reached out to GitHub. I get in touch with Tom Werner, and the following morning there is a mail in my mailbox.</p>

<p>Github’s intervention is important in showing the potential of Git and Github for other kinds of projects than just software development. It also shows the power of the UFO format: it is much easier to write this kind of visualisation when you are dealing with an open, hackable format like UFO. We are only just beginning to explore the potential of these new models of collaboration.</p>

<p>Micah Rich <a href="http://www.netmagazine.com/features/top-10-open-source-web-fonts" title="The top 10 open source web fonts | Feature | .net magazine">calls</a> Open Baskerville a major inspiration for the <a href="http://www.theleagueofmoveabletype.com/" title="The League of Moveable Type">League of Movable Type</a> (they are <a href="https://github.com/theleagueof">on GitHub too</a>); OSP are working on their own code hosting called Visual Culture that is going to power new releases for their <a href="http://osp.constantvzw.org/foundry/" title="OSP-foundry">foundry</a>.</p>

<a href="https://github.com/klepas/open-baskerville/tree/master/OpenBaskerville.ufo" title=""><img src="/and/assets/scaled/to/490/wide/and/called/github_ufo_preview.png" alt="You see a screenshot from the GitHub interface. It consists of a file listing of the contents of a UFO folder called OpenBaskerville.ufo. Below extends a preview of all the glyphs contained within this UFO." title="" style="width:490px;height:1175px;"></a>]]>
        
    </content>
</entry>

<entry>
    <title>Figuring Out Fontforge-Python’s Representation of Postscript Curves</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/figuring-out-fontforge-pythons-representation-of-postscript-curves" />
    <id>tag:i.liketightpants.net,2012:/and//1.51</id>

    <published>2012-06-03T15:06:30Z</published>
    <updated>2012-12-25T22:55:28Z</updated>

    <summary>A young man poses to the right of a whiteboard on which is constructed a path of curves and lines.</summary>
    <author>
        <name>tellyou</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[<p><a href="/and/assets/called/i_like_tightpants_and_figuring_out_fontforge_pythons_representation_of_postscript_curves_2.jpg">
  <img src="/and/assets/scaled/to/830/wide/and/called/i_like_tightpants_and_figuring_out_fontforge_pythons_representation_of_postscript_curves_2.jpg" style="width:830;height:555;" alt="You see a young man posing to the right of a whiteboard, looking into the camera. He holds a marker in his right hand as if he is writing, his right foot is planted on the whiteboards horizontal support. He wears black leggings and a salmon pink sleeveless t-shirt. On the whiteboard is constructed a path of curves and lines, showing also the bézier control points. All the points are marked either offCurve or onCurve." title="" />
</a></p>

<p class="byline">At the OSP workshop <a href="http://osp.schr.fr/workshop/write-me-a-shadow/raw/latest/specimen/index.html" title="Write me a shadow. OSP @ ESAD Valence">Write me a shadow</a>, ESAD Valence (FR)</p>

<p>When <a href="http://www.ludi.be/" title="ludi">Ludi</a> and me prepare for a workshop on Open Source typography in Valence, we put together a batch of Python scripts for Fontforge. Among which a port of <a href="http://i.liketightpants.net/and/programmatically-manipulating-typefaces#comment-168" title="I like tight pants and programmatically manipulating typefaces">the script</a> that John and me made in Robofab for a previous workshop, that straightens curves by removing the bézier handles.</p>

<p>Internally, many typefaces are constructed with PostScript, which can be seen as a set of drawing instructions to an imaginary pen.</p>

<p>Postscript has three basic drawing instructions:<br/>
<em>moveto(x, y)</em>: move the pen to this point to start drawing a path<br/>
<em>lineto(x,y)</em>: draw a line from the previous point to the point x,y<br/>
<em>curveto(x1,y1,x2,y2,x3,y3)</em>: draw a curve from the previous point to the point x3,y3, using x1,y1 and x2,y2 as bézier handles, off curve points that control the shape of the curve.</p>

<p>It turns out that Fontforge-Python represents PostScript contours as a set of points. Fair enough. The points have a type property, which can be either onCurve or offCurve. So like in the Robofab script, we first try to remove all the offCurve points.</p>

<p>This turns out to be too radical: a lot more points are removed then seems necessary. Prince Charmant <a href="http://www.oep-h.com/" title="OEP-H">Pierre Marchand</a> to the rescue. It turns out that points that are normally created as part of a lineto, are also called offCurve by FontForge, even if they are strictly speaking neither on or off a curve.</p>

<p>So, how to keep the points called offCurve that are actually part of the contours, and throw away the others? We know that if a point is onCurve, it will always be followed y two control points (offCurve). So instead of checking for offCurves, we simply skip the next two points every time we encounter an onCurve.</p>

<p>Like this:</p>


<pre>font = fontforge.activeFont()

for glyph in font.glyphs():
   new_contours = []
   for contour in glyph.layers[1]:
       new_contour = []
       i = 0
       while i &lt; len(contour):
           p = contour[i]
           if p.on_curve:
               i += 2
           new_contour.append((p.x, p.y))
           i += 1
       new_contours.append(new_contour)
   pen = glyph.glyphPen()
   for to_draw in new_contours:
       pen.moveTo(to_draw[0])
       for i in to_draw[1:]:
           pen.lineTo(i)
       pen.closePath()</pre>

<p>This won’t work, by the way, if you are dealing with TrueType curves. But that’s a different story altogether.</p>]]>
        
    </content>
</entry>

<entry>
    <title>Programmatically manipulating typefaces</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/programmatically-manipulating-typefaces" />
    <id>tag:i.liketightpants.net,2012:/and//1.50</id>

    <published>2012-05-02T10:43:36Z</published>
    <updated>2013-02-09T22:04:13Z</updated>

    <summary>The structure of a typeface is predictable enough to make it fun to manipulate it with computer scripts.</summary>
    <author>
        <name>bnf</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
    <style>
@font-face {
    font-family: 'LeagueGothicRomanRomanRotated';
    src: url('/and/assets/called/leaguegothic-rotated-webfont.eot');
    src: url('/and/assets/called/leaguegothic-rotated-webfont.eot?#iefix') format('embedded-opentype'),
         url('/and/assets/called/leaguegothic-rotated-webfont.woff') format('woff'),
         url('/and/assets/called/leaguegothic-rotated-webfont.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}

.rotate_example {
  font-family: 'LeagueGothicRomanRomanRotated';
  font-size: 36px;
  line-height: 36px;
}

@font-face {
    font-family: 'URWPalladioLBoldRegular';
    src: url('/and/assets/called/urwpalladiol-bold-webfont.eot');
    src: url('/and/assets/called/urwpalladiol-bold-webfont.eot?#iefix') format('embedded-opentype'),
         url('/and/assets/called/urwpalladiol-bold-webfont.woff') format('woff'),
         url('/and/assets/called/urwpalladiol-bold-webfont.ttf') format('truetype'),
         url('/and/assets/called/urwpalladiol-bold-webfont.svg#URWPalladioLBoldRegular') format('svg');
    font-weight: normal;
    font-style: normal;
}
@font-face {
    font-family: 'URWPalladioLStraightCurvesBRg';
    src: url('/and/assets/called/urwpalladiol-straightcurves-bold-webfont.eot');
    src: url('/and/assets/called/urwpalladiol-straightcurves-bold-webfont.eot?#iefix') format('embedded-opentype'),
         url('/and/assets/called/urwpalladiol-straightcurves-bold-webfont.woff') format('woff'),
         url('/and/assets/called/urwpalladiol-straightcurves-bold-webfont.ttf') format('truetype'),
         url('/and/assets/called/urwpalladiol-straightcurves-bold-webfont.svg#URWPalladioLStraightCurvesBRg') format('svg');
    font-weight: normal;
    font-style: normal;
}
.palladio { font-family: 'URWPalladioLBoldRegular'; font-size: 36px; line-height: 48px; }
.palladio-straight { font-family: 'URWPalladioLStraightCurvesBRg'; font-size: 36px; line-height: 48px; }

@font-face {
  font-family: 'jaja-v';
  font-weight: normal;
  src: url('/and/assets/called/jaja-v.otf');
}

@font-face {
  font-family: 'jaja-h';
  font-weight: normal;
  src: url('/and/assets/called/jaja-h.otf');
}

</style>

<pre class="rotate_example">#!/usr/bin/env python

# usage: $ python rotate-font-fontforge.py "League Gothic.ufo" League-Gothic-tranformed.ufo

import fontforge
import psMat
import math
import sys

matrix = psMat.rotate(math.radians(45))

font = fontforge.open(sys.argv[1])

for glyph in font.glyphs():
    glyph.transform(matrix)

font.generate(sys.argv[2])</pre>

<p>If you like programming, chances are you like typefaces. <a href="http://chneukirchen.org/trivium/" title="Trivium">My favourite tumblelog</a>, by developer Christian Neukirchen, often links to type design projects. As does <a href="http://news.ycombinator.com/" title="Hacker News">Hacker News</a>. And programming demigod <a href="http://www-cs-faculty.stanford.edu/~uno/" title="Don Knuth's Home Page">Donald Knuth</a> took time off from his epos The Art of Computer Programming to develop his own <a href="http://en.wikipedia.org/wiki/Computer_Modern" title="Computer Modern - Wikipedia, the free encyclopedia">parametric typeface</a>. And the <a href="http://en.wikipedia.org/wiki/METAFONT" title="Metafont - Wikipedia, the free encyclopedia">language that describes</a> it. And an accompanying <a href="http://en.wikipedia.org/wiki/TeX" title="TeX - Wikipedia, the free encyclopedia">lay out engine</a>.</p>

<p>Typefaces are wonderful hybrids between design and tool. More so than any other type of design they are made to be reused. And more so than any other type of design they have a predictable structure (a font made out of glyphs made out of contours made out of points), that makes them especially suitable to be manipulated through computer programs of your own devising.</p>

<p>Yet if you haven’t worked within the confines of the type design world, chances are you have not yet experienced exactly how straightforward it is to work with typefaces programmatically, nowadays.</p>

<p>Yes, your typical binary font file is quite messy to open up and to play around with. That is why it is nice if you can use a programming library to access them. But in addition we now have the <a href="http://unifiedfontobject.org/" title="Unified Font Object">UFO file format</a>, which is meant as an open, hackable file format for fonts. And there exist two libraries that really make it really easy to deal with font objects in a high level fashion: <a href="http://robofab.org/" title="RoboFab">Robofab</a> and <a href="http://fontforge.sourceforge.net/python.html" title="Writing python scripts to change fonts in FontForge">FontForge-python</a>. They allow you to iterate over all the glyphs, contours and points in your font in order to change them around.</p>

<p>Both libraries are written in the Python language. There is a historical reason for this. The typographers <a href="http://www.letterror.com/" title="LettError Type: Fonts and Typography">Just van Rossum and Erik van Blokland</a> are pioneers in scripting for type design. Their choice to go with Python has contributed to making it the go to scripting language in the type design world.</p>

<p>I can imagine that reasons for choosing Python include that it is straightforward and high level<span style="color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: small; line-height: 16px; background-color: rgb(255, 255, 255);">—</span>and in being white space sensitive it is arguably one of the few languages which is opiniated typographically! I imagine it also played a role that Just van Rossum is the brother of Guido van Rossum, who wrote the Python language.</p>

<p>If you already know Python, you are in luck. If you know programming, but do not know Python, it is pretty easy to pick up. And if you do not write programs yet, Python is a great language to get started as it is quite straightforward and consistent.</p>

<p>RoboFab is made by the aforementioned Dutch duo, joined by <a href="http://talleming.com/" title="Tal Leming">Tal Leming</a>. It started its life as a scripting language for Fontlab, one of the more popular commercial font editors (and for quite some time the only one). But since the inception of the UFO file format, you can use the RoboFab library in your stand alone python scripts.</p>

<p>A downside to RoboFab is that it will only work with UFO fonts. In this sense the Python extension to FontForge is more flexible. It makes a lot of the functionality of <a href="http://fontforge.sourceforge.net/" title="FontForge">FontForge</a> available to Python: FontForge is the main open source font editor. With python-fontforge you can open and save in a slew of different font formats. It is also easy to export individual glyphs to images, or to import vector shapes into your font.</p>

<p>A downside to python-fontforge is that it might be tricky to install. On Linux it is usually quite easy (Debian/ubuntu: <code>sudo apt-get install fontforge python-fontforge</code>). On the Mac it used to be more hard: installing the Python extension through Homebrew is <a href="https://github.com/mxcl/homebrew/issues/4689">not working out yet</a>. Luckily, developer Jeff Escelante recently reached out to me over this issue. He is now providing a <a href="https://github.com/jenius/Fontforge-Installer">Fontforge installer</a> for Mac OSX that provides the python extension. But on Windows, I am not sure how feasible it is to get python-fontforge working? If someone could re-package the whole thing is an easy_installable package that would be wonderful.</p>

<p>In implementation the two libraries are quite similar. Imagine we have downloaded the open source League Gothic in UFO format (<a href="https://github.com/theleagueof/league-gothic/zipball/master">link!</a> The ufo is in the source folder) and you put the UFO in the same folder as your python script.</p>

<p>Here is how you load in a font and print the names of the glyphs:</p>

<p>Fontforge</p>

<pre>#!/usr/bin/env python

# usage: $ python print-glyphs-fontforge.py "League-Gothic.ufo"

import fontforge
import sys

font = fontforge.open(sys.argv[1])

for glyph in font.glyphs():
    print glyph
</pre>

<p>Robofab</p>

<pre>#!/usr/bin/env python

# usage: $ python print-glyphs-robofab.py "League Gothic.ufo"

from robofab.world import RFont
import sys

font = RFont(sys.argv[1])

for glyph in font:
    print glyph.name
</pre>

<p>And this is to rotate each glyph 45 degrees and save to a new font.</p>

<p>Fontforge:</p>

<pre>#!/usr/bin/env python

# usage: $ python rotate-font-fontforge.py "League Gothic.ufo" League-Gothic-tranformed.ufo

import fontforge
import psMat
import math
import sys

matrix = psMat.rotate(math.radians(45))

font = fontforge.open(sys.argv[1])

for glyph in font.glyphs():
    glyph.transform(matrix)

font.generate(sys.argv[2])
</pre>

<p>Robofab:</p>

<pre>#!/usr/bin/env python

# usage: $ python rotate-font.py "League Gothic.ufo" League-Gothic-tranformed.ufo

from robofab.world import RFont
from fontTools.misc.transform import Identity
import math
import sys

matrix = Identity
matrix = matrix.rotate(math.radians(45))

font = RFont(sys.argv[1])

for glyph in font:
    glyph.transform(matrix)

font.save(sys.argv[2])
</pre>


    ]]>
        
    </content>
</entry>

<entry>
    <title>Drawing logo’s</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/drawing-logos" />
    <id>tag:i.liketightpants.net,2012:/and//1.49</id>

    <published>2012-04-24T15:06:26Z</published>
    <updated>2012-12-25T22:57:57Z</updated>

    <summary>You see a frog with a crown, constructed of two yellow vertexes.</summary>
    <author>
        <name>baseline</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[<script src="/and/scripts/being/processing-1.3.6.min.js"></script>
<canvas data-processing-sources="/and/scripts/being/osp-frog.pde">With canvas enabled you would see a frog with a crown, constructed of two yellow vertexes.</canvas>

<p>In London, after <a href="http://www.sebastiensanfilippo.be/" title="Sebastien Sanfilippo's Portfolio">Seb</a> has explained <a href="http://i.liketightpants.net/and/seb-explaining-love-and-bezier-curves" title="I like tight pants and seb explaining love and bezier curves">love and bezier curves</a> to jenseits, <a href="http://www.oep-h.com/" title="OEP-H">Pierre</a> sets up a way to communicate with our <a href="http://www.scribus.net/canvas/Scribus" title="Scribus.net">DTP-software</a> via IRC chat. Seb starts to scribble coordinates, sends through a number of commands, and up on the beamer appears a stark re-imagining of the <a href="http://ospublish.constantvzw.org/" title="OSP &#8212; Open Source Publishing &#8211; Design Tools For Designers">OSP</a> logo.</p>

<p>Seb has made direct use of one of the basic principles in computer graphics: giving instructions to draw to a virtual canvas. As a graphic designer you are always using programs like Illustrator or <a href="http://inkscape.org/" title="Inkscape. Draw Freely.">Inkscape</a> to create these kind of instructions so it is refreshing to do so yourself.</p>

<p>This is the code used, adapted to <a href="http://processingjs.org/" title="Processing.js">Processing.js</a>:</p>


<pre>size(600,600);
background(255);
strokeWeight(6);
stroke(255, 255, 0);
noFill();

beginShape();
vertex(451, 29);
vertex(401, 130);
vertex(355, 29);
vertex(334, 128);
vertex(291, 26);
vertex(291, 169);
vertex(445, 169);
endShape(CLOSE);

beginShape();
vertex(517, 273);
vertex(366, 127);
vertex(37, 423);
vertex(250, 543);
vertex(252, 447);
vertex(483, 531);
vertex(371, 419);
endShape(CLOSE);</pre>]]>
        
    </content>
</entry>

<entry>
    <title>Seb Explaining Love and Bezier Curves</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/seb-explaining-love-and-bezier-curves" />
    <id>tag:i.liketightpants.net,2012:/and//1.48</id>

    <published>2012-04-16T22:06:08Z</published>
    <updated>2012-04-16T22:18:47Z</updated>

    <summary>You see a large sheet of paper upon which a constructed drawing of a heart, showing also the mathematical construction of the curves.</summary>
    <author>
        <name>jenseits</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[<p><a href="/and/assets/called/love_and_bezier_curves.jpg"><img src="/and/assets/scaled/to/830/wide/and/called/love_and_bezier_curves.jpg" alt="You see a large sheet of paper upon which a constructed drawing of a heart, showing also the mathematical construction of the curves." title="" style="width:622px;height:830px;" /></a></p>

<p class="byline">From an <a href="http://ospublish.constantvzw.org/images/snapshots/rca-workshop">OSP Workshop</a> at Royal College of Art, London</p>]]>
        
    </content>
</entry>

<entry>
    <title>My favourite logo ever is for GNU Pascal</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/my-favourite-logo-ever-is-for-gnu-pascal" />
    <id>tag:i.liketightpants.net,2012:/and//1.47</id>

    <published>2012-04-07T23:53:37Z</published>
    <updated>2012-04-10T22:51:46Z</updated>

    <summary>This is easily my favourite logo in the world. It is for a computer program called GNU Pascal. To the left, we see a gnu. To the right, Blaise Pascal. </summary>
    <author>
        <name>baseline</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[<p>
  <a href="http://www.gnu-pascal.de/gpc/h-resources.html#Drawing">
    <object type="image/svg+xml" style="width:830px;height:657px;" data="/and/assets/called/GnuPascal.svg">
      <img src="/and/assets/called/GnuPascal.png" style="width:830px;height:657px;" alt="A digital pen drawing of a gnu and of Blaise Pascal, side by side, from the shoulders up." />
    </object>
  </a>
</p>

<p>This is easily my favourite logo in the world. It is for a computer program called <a href="http://www.gnu-pascal.de/gpc/h-index.html" title="GNU Pascal">GNU Pascal</a> (a programming language in fact). To the left, we see a gnu. To the right, Blaise Pascal. Rather than trying to convey brand values through metaphor, the name is depicted in the most literal way imaginable.</p>

<p>It’s not just the literalness that is unusual. The use of this kind of figurative illustration in logos is rare. The only niche that springs to mind is <a href="/and/assets/called/HansTextiel.gif" title="">1970ies retail chains</a>.</p>

<p>Visual abstraction has becomes the norm in corporate branding since the post WWII period. In America, designers like <a href="http://www.paul-rand.com/foundation/identity/" title="Paul-Rand.com :: American Modernist :: 1914-1996">Paul Rand</a> and Saul Bass started to produce logos in flat colours and simple shapes that aimed to convey what the companies are about. It is this language that has stuck with us for logos ever since.</p>

<p>Even though it might be useful to convey a brand message that is clear and straightforward, there is an obvious limit to the benefits of abstraction. As the brand values a logo is supposed to express get exceedingly open ended (‘innovation’, ‘integrity’), it becomes more difficult to visually evocate them. That is how we end up with logos built around isometric cubes and moebius strips, and with <a href="http://www.salon.com/1999/11/30/naming/" title="The name game -   Advertising - Salon.com">company names</a> like Agilent and Avilant.</p>

<p>It is here that the literalness of GNU Pascal provides the counterbalance I look for. I heart the complete absence of symbolism. And the departure from traditional corporate marketing is all the more exciting because it rhymes with the product itself. GNU Pascal is open source software: it is changeable and redistributable at will. As such it is built more on the values of the academic world than on the traditional corporate ethos. And while visual identities for open source software tend to be pale imitations of corporate aesthetics, GNU Pascal is one clue of how such software could find a style of its own.</p>]]>
        
    </content>
</entry>

<entry>
    <title>My Favourite Wikipedia User User:Rama</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/my-favourite-wikipedia-user-user-rama" />
    <id>tag:i.liketightpants.net,2012:/and//1.46</id>

    <published>2012-02-23T22:43:26Z</published>
    <updated>2013-04-09T09:11:44Z</updated>

    <summary>Besides these people being engaged in intercourse, you might notice the programming book in the lower right corner, on C++.</summary>
    <author>
        <name>tellyou</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
    <p><a href="http://en.wikipedia.org/wiki/File:Deckchair_sex_position.jpg">
  <img src="/and/assets/scaled/to/830/wide/and/called/User-Rama-Deckchair_sex_position.jpg" style="width:830;height:435;" alt="User-Rama-Deckchair_sex_position.jpg" title="">
</a></p>

<p><b>Update: the pictures have since been <a href="http://commons.wikimedia.org/wiki/Commons:Deletion_requests/All_images_in_Category:Sex_drawings_by_User:Rama" style="" target="_self" title="Commons:Deletion requests/All images in Category:Sex drawings by User:Rama - Wikimedia Commons">deleted</a>.</b></p><p>On this picture, besides the main action, you might notice the programming book in the lower right corner, on C++. As such, this image unites two interests of its author, who is my favourite Wikipedia contributor: User:Rama.</p>

<p>User:Rama describes himself as: Physicist by training, scientist by vocation. He makes <a href="http://en.wikipedia.org/wiki/User:Rama/Sexuality_drawings" title="User:Rama/Sexuality drawings - Wikipedia, the free encyclopedia">his illustrations</a>, which he describes as fugly drawings, with a <a href="http://en.wikipedia.org/wiki/Yatate">yatate</a>, a Japanese medieaval pen.</p>

<p>The style varies between the images. Though many are decidedly retro, this image close-up has a contemporary feel:</p>

<p><a href="http://en.wikipedia.org/wiki/File:Fellatio.jpg">
  <img src="/and/assets/scaled/to/830/wide/and/called/User-Rama-Fellatio.jpg" style="width:830;height:568;" alt="User-Rama-Fellatio.jpg" title="">
</a></p>

<p>The style looks like <a href="http://images.google.com/images?q=raymond+pettibon" title="raymond pettibon - Google Search">Raymond Pettibon</a>, an artist whom I adore. Music fans probably know his work through is album covers for Black Flag, and especially through his seminal record cover for <a href="http://en.wikipedia.org/wiki/Goo_(album)" title="Goo (album) - Wikipedia, the free encyclopedia">Sonic Youth’s GOO</a>.</p>

<p>Pettibon’s style is known as ugly drawing. So the resemblance goes all the way through nomenclature. I’m not sure if Rama and Pettibon are aware of each others work though.</p>

<p>But I wonder, User:Rama, where are you now? Are you still on our team? Everything I know about you I found out through your <a href="http://commons.wikimedia.org/wiki/User:Rama" title="User:Rama - Wikimedia Commons">user page</a>. But now it does not link anymore to the sexuality drawings, and it does not talk about the Yatate. Gone are also you displays of pride for Europe: you used to embed the European flag and the EU’s hymn, Ode to Joy. You used to make me feel so good about being European!</p>
    ]]>
        
    </content>
</entry>

<entry>
    <title>Daniela Likes Open Source Programming Conferences Like Fosdem</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/daniela-likes-open-source-programming-conferences-like-fosdem" />
    <id>tag:i.liketightpants.net,2012:/and//1.45</id>

    <published>2012-02-17T21:55:41Z</published>
    <updated>2012-05-02T09:56:00Z</updated>

    <summary>Daniela likes tight pants. And she is ready to engage with the world of computer programmers. When a large group of open source software developers pass by our city, we grab our chance. </summary>
    <author>
        <name>glit</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[<p><a href="/and/assets/called/daniela_likes_fosdem.jpg"><img src="/and/assets/scaled/to/830/wide/and/called/daniela_likes_fosdem.jpg" style="width:830;height:553;" alt="" title="" /></a></p>

<p>Daniela likes tight pants. I guess that makes it easy for her to relate to our blog. As an art student, she is ready to <a href="/and/absolute-beginners-unix-for-art-students-part-1" title="I like tight pants and absolute beginners: unix for art students Ã¢â¬â part 1">learn about unix</a>.</p>

<p>I tell Daniela that we are in luck, because this weekend, there is the largest gathering of open source computer programmers in Europe, <a href="/and/why-would-europes-largest-open-source-convention-identify-itself-with-a-large-shrivelled-brain" title="I like tight pants and why would europe’s largest open source convention identify itself with a large shrivelled brain?">Fosdem</a>. We go. I’m always scared to blend in too much at computer conferences like this so I put on a Lady Gaga t-shirt.</p>

<p>We plan to visit the final keynote speech because like this you experience a lot of people together. Plus, the topic tends to be of interest to a broader public. This year it is the Freedom box, a kind of mini server for your private data, the idea being that if everyone has such a box they can hook up together to create a more secure and more private social networking experience.</p>

<p>Tellyou is there too and he does some translating for us (‘what is Debian?’). We can relate to the topic even though the speaker does not seem to be to joyous. Daniela notices he mentions ‘community’ a lot. I think this is because in cyberspace, the community is less bound by place and more volatile so you have to stress it is actually there. The organising commitee comes on stage to provide both a song and a fosdem dance.</p>

<p>As we leave, Daniela asks me if I think they will succeed with the Freedom box. I think they will, up to a degree, and then the technology will be re appropriated and made popular by more business minded people.</p>

<p><a href="/and/assets/called/daniela_likes_tight_pants.jpg"><img src="/and/assets/scaled/to/490/wide/and/called/daniela_likes_tight_pants.jpg" style="width:490;height:326;" alt="You see a group of young people on a coach, among which a man with glasses and a colourful tracker jacket, and a girl holding a telephone, wearing a pinstriped legging and a blazer." title="" /></a></p>

<div id="aside">
  <img src="/and/assets/called/a_long_pink_arrow.png" style="width:99px;height:618px;margin-top:554px;" alt="Arrow that goes right and then down Ã¢â Â´" title="" />
</div>]]>
        
    </content>
</entry>

<entry>
    <title>Why Would Europe’s Largest Open Source Convention Identify Itself With a Large Shrivelled Brain?</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/why-would-europes-largest-open-source-convention-identify-itself-with-a-large-shrivelled-brain" />
    <id>tag:i.liketightpants.net,2012:/and//1.44</id>

    <published>2012-02-03T18:55:34Z</published>
    <updated>2013-02-02T23:22:01Z</updated>

    <summary>From the perspective of visual communication, I wonder. What is it they are trying to communicate? A kind of crude parody of Cartesian dualism perhaps?</summary>
    <author>
        <name>baseline</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
    <p><a href="http://www.flickr.com/photos/comzeradd/4767178153/" title="fosdem launch by comzeradd, on Flickr"><img src="http://i.liketightpants.net/and/assets/scaled/to/830/wide/and/called/fosdem.jpg" width="830" height="555" alt="fosdem launch"></a></p>

<p class="byline">Launch of <a href="http://fosdem.org/2012/">Fosdem</a> conference, <a href="http://www.flickr.com/photos/comzeradd/4767178153">photo by comzeradd</a></p>

<p><img src="http://i.liketightpants.net/and/assets/called/FOSDEM11_date2.jpg" style="width:300px;height:338px;"></p>

<p>Coming from the perspective of visual communication, I wonder. What is it they are trying to communicate? A kind of crude parody of <a href="http://en.wikipedia.org/wiki/Dualism_%28philosophy_of_mind%29">Cartesian dualism</a> perhaps? </p>

    ]]>
        
    </content>
</entry>

<entry>
    <title>Downloading funghi, from Wikimedia Commons</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/downloading-funghi" />
    <id>tag:i.liketightpants.net,2012:/and//1.43</id>

    <published>2012-02-03T17:36:40Z</published>
    <updated>2012-02-03T18:03:07Z</updated>

    <summary># print the urls of all the images in a category of Wikimedia Commons
# example:
# $ python get_commons.py &quot;Category:Illustrations_of_fungi&quot;</summary>
    <author>
        <name>bnf</name>
        
    </author>
    
        <category term="Scripts" scheme="http://www.sixapart.com/ns/types#category" />
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[<pre>#!/usr/bin/env python
# print the urls of all the images in a category of Wikimedia Commons
# example:
# $ python get_commons.py "Category:Illustrations_of_fungi"

# pipe to wget for download:
# $ python get_commons.py [category] | wget -i - --wait 1

import sys
import json
import urllib2
from urllib import quote

def make_api_query(category, q_continue=""):
    if q_continue:
        q_continue = '&gcmcontinue=' + q_continue
    url = 'http://commons.wikimedia.org/w/api.php?action=query&generator=categorymembers&gcmtitle=' + category + q_continue + '&gcmlimit=500&prop=imageinfo&iiprop=url&format=json'
    request = json.loads(urllib2.urlopen(url).read())
    if 'error' in request:
        sys.exit(request['error']['info'])
    for page in request['query']['pages'].values():
        try:
            print page['imageinfo'][0]['url']
        except KeyError: pass
    # there is a maximum of 500 results in one request, for paging
    # we use the query-continue value:
    if 'query-continue' in request:
        q_continue = quote(request['query-continue']['categorymembers']['gcmcontinue'])
        make_api_query(category, q_continue)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        sys.exit("usage: python get_commons.py [category]")
    make_api_query(sys.argv[1])</pre>

<p><a href="/and/get_commons.py">Download</a></p>

<p><img src="/and/assets/called/funghi.png" style="width:603px;height:390px;" /></p>]]>
        
    </content>
</entry>

<entry>
    <title>Making unix programs</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/making-unix-programs" />
    <id>tag:i.liketightpants.net,2012:/and//1.42</id>

    <published>2012-02-02T12:33:26Z</published>
    <updated>2012-02-03T15:42:26Z</updated>

    <summary>It is really easy to add your own commands to Unix. Which is actually the reason it is a mess sometimes.</summary>
    <author>
        <name>tellyou</name>
        
    </author>
    
        <category term="Absolute Beginners: Unix for Art Students" scheme="http://www.sixapart.com/ns/types#category" />
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[<p><a href="http://i.liketightpants.net/and/assets/called/serious_as_inverse_steve.jpg" /><img src="http://i.liketightpants.net/and/assets/scaled/to/490/wide/and/called/serious_as_inverse_steve.jpg" style="width:490px;height:490px;"/></a></p>

<p class="byline">photo by <a href="http://www.johannieuwenhuize.nl/">Johan Nieuwenhuize</a></p>

<p>It is really easy to add your own commands to Unix. Even a small script you write can be used in the same way as other unix commands. (Which is actually the reason Unix is a mess sometimes, because everybody went in and added their own commands.)</p>

<p>The reason it is so straightforward to create Unix programs is that you do not have to program or design a graphic user interface: everything runs from the terminal. This is part of programmer culture: <a href="/and/absolute-beginners-unix-for-art-students-part-1">like glit argues</a>, if you want to stay up to date with new exciting developments, you need to know how to run things from the terminal, because programmers are usually not going to take the time to create a graphical user interface for their latest experiments. Instead, they, will distribute it as a unix script.</p>

<h3>The interface</h3>

<p>Instead of letting the user manipulate buttons and text boxes, a unix program accepts arguments and options on the command line. Unix programs can also specify what to do with the text passed in by other programs via pipelines (standard input). And what almost every program does: they can output text to the terminal (standard output).</p>]]>
        
    </content>
</entry>

<entry>
    <title>The Thinking Body</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/the-thinking-body" />
    <id>tag:i.liketightpants.net,2012:/and//1.41</id>

    <published>2012-01-25T11:59:10Z</published>
    <updated>2012-01-25T12:19:14Z</updated>

    <summary>You see a black laptop posited on a hardboard floor, upon the laptop is written in chalk: BODY</summary>
    <author>
        <name>jenseits</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[<p><a href="/and/assets/called/the_thinking_body.jpg"><img src="/and/assets/scaled/to/830/wide/and/called/the_thinking_body.jpg" style="width:830;height:622;" alt="You see a black laptop posited on a hardboard floor, upon the laptop is written in chalk: BODY." title="" /></a></p>

<p class="byline">by <a href="http://www.google.be/search?q=bruno+listopad&amp;ie=UTF-8&amp;oe=UTF-8" title="bruno listopad - Google zoeken">Bruno</a>, <a href="http://www.danslab.nl/projects/season-2008-2009/2ndresearch0/bruno/" title="Bruno Listopad">researching</a> at <a href="http://www.danslab.nl/" title="News">danslab</a></p>]]>
        
    </content>
</entry>

<entry>
    <title>Absolute Beginners: Unix for Art Students – part 3</title>
    <link rel="alternate" type="text/html" href="http://i.liketightpants.net/and/absolute-beginners-unix-for-art-students-part-3" />
    <id>tag:i.liketightpants.net,2012:/and//1.40</id>

    <published>2012-01-15T23:46:09Z</published>
    <updated>2013-02-02T23:23:56Z</updated>

    <summary>Using a set of unix commands to lay out Jenny Holzer tweets.</summary>
    <author>
        <name>baseline</name>
        
    </author>
    
        <category term="Absolute Beginners: Unix for Art Students" scheme="http://www.sixapart.com/ns/types#category" />
    
    
    <content type="html" xml:lang="en" xml:base="http://i.liketightpants.net/and/">
        <![CDATA[
    <p><a href="/and/assets/called/sex_differences_are_here_to_stay.jpg"><img src="/and/assets/scaled/to/830/wide/and/called/sex_differences_are_here_to_stay.jpg" alt="In what is probably an office space or design studio (you can make out a laser printer, the back of a flatscreen monitor) a text is tacked to the wall constructed of a number of A4 sheets collated together: SEX DIFFERENCES ARE HERE TO STAY" style="width:830px;height:553px;" title=""></a></p>

<p>After working through the <a href="/and/absolute-beginners-unix-for-art-students-part-1" title="I like tight pants and absolute beginners: unix for art students Ã¢â¬â part 1">first</a> <a href="/and/absolute-beginners-unix-for-art-students-part-2" title="I like tight pants and absolute beginners: unix for art students Ã¢â¬â part 2">two</a> <a href="/and/installing-compilers" title="I like tight pants and installing compilers">parts</a> of Absolute Beginners: Unix for Art Students <a href="/and/i-have-relocated-to-brussels" title="I like tight pants and i have relocated to brussels">Fabien</a> asked me how you can than actually use the terminal to make something. That is a good question. In <a href="/and/absolute-beginners-unix-for-art-students-part-1" title="I like tight pants and absolute beginners: unix for art students Ã¢â¬â part 1">part 1</a> gilt writes that it is commendable to find a more intimate way of dealing with your computer, but that does not enter the question <em>what</em> you could be doing with your terminal. Taking cues from a <a href="http://schr.fr/hypermap" title="HYPERMAP | schr.fr">design installation</a> we developed for the Performance Studies International festival, I would like to show an example of using the command line to create graphic images, and the kind of design processes that it can accommodate.</p>

<h3>Building pipelines</h3>

<p>The unix command line is built around passing around text. Programs generate text, and other programs can take this as their input. You can start to create whole ‘pipelines’ of programs all connected together.</p>

<p>As our input today we take the <a href="http://twitter.com/jennyholzer" title="Twitter | Jenny Holzer">tweets of Jenny Holzer</a>. I do not know if you’ve heard of her, but Jenny Holzer is an artist who’s work prefigures contemporary social media: long before the advent of Facebook and twitter she has been claiming public space with her written truisms that, <a href="http://i.liketightpants.net/and/i-like-ziggy-over-zarathustra#jennyholzer" title="I like tight pants and ziggy over zarathustra">like habitus says</a>, always precipitate on the edge between worn clichés and individual confessions (<em>with you inside me comes the knowledge of my own death</em>).</p>

<p>Seeing how Holzer has built her oeuvre and her career around the logic of the status update since well before it existed, it was a small step for her to take her work to twitter.</p>

<p>Today we are not going to visit the twitter website, we are going to access it via the terminal. To get the latest tweet from Jenny Holzer we use the command:</p>

<pre>curl "http://twitter.com/statuses/user_timeline/jennyholzer.json?count=1"</pre>

<p>The output will be something like:</p>

<pre>[{"coordinates":null,"truncated":false,"place":null,"geo":null,"in_reply_to_user_id":null,"retweet_count":36,"favorited":false,"in_reply_to_status_id_str":null,"user":{"listed_count":1572,"contributors_enabled":false,"lang":"en","profile_text_color":"000000","protected":false,"location":"","statuses_count":359,"profile_background_image_url":"http:\/\/a0.twimg.com\/images\/themes\/theme1\/bg.png","name":"Jenny Holzer","default_profile":false,"profile_link_color":"D73030","url":"http:\/\/en.wikipedia.org\/wiki\/Jenny_Holzer","utc_offset":-18000,"description":"Abuse of power comes as no surprise.","friends_count":0,"profile_background_color":"D73030","following":true,"profile_background_tile":false,"followers_count":37419,"profile_image_url":"http:\/\/a2.twimg.com\/profile_images\/25643062\/jenny_holzer_normal.jpg","default_profile_image":false,"geo_enabled":false,"created_at":"Wed May 30 19:07:47 +0000 2007","profile_sidebar_fill_color":"F0F0F0","profile_background_image_url_https":"https:\/\/si0.twimg.com\/images\/themes\/theme1\/bg.png","favourites_count":0,"is_translator":false,"show_all_inline_media":false,"follow_request_sent":false,"notifications":false,"profile_sidebar_border_color":"000000","profile_image_url_https":"https:\/\/si0.twimg.com\/profile_images\/25643062\/jenny_holzer_normal.jpg","screen_name":"jennyholzer","id_str":"6451032","verified":false,"id":6451032,"profile_use_background_image":false,"time_zone":"Eastern Time (US &amp; Canada)"},"in_reply_to_screen_name":null,"created_at":"Fri Jan 13 15:34:55 +0000 2012","in_reply_to_user_id_str":null,"retweeted":false,"source":"\u003Ca href=\"http:\/\/twitter.com\/#!\/download\/iphone\" rel=\"nofollow\"\u003ETwitter for iPhone\u003C\/a\u003E","id_str":"157848105683922945","in_reply_to_status_id":null,"id":157848105683922945,"contributors":null,"text":"SEX DIFFERENCES ARE HERE TO STAY"}]</pre>

<p>Curl is a program that gets the contents of a document on the web, and prints it out to the terminal.</p>

<p>We have requested the status from twitters API, which is a way for twitter to present the data in a format that is more easy for computer programs to consume. It uses JSON format, which is great and all, but it’s just a little bit to new-fashioned for our means: we want plain old fashioned text.</p>

<p>To go from the JSON to the old fashioned text, we are constructing the first part of our timeline.</p>

<p>Try:</p>

<pre>curl "http://twitter.com/statuses/user_timeline/jennyholzer.json?count=1" | sed 's/.*"text":"\([^"]*\)".*}]/\1/g'</pre>

<p>The output is:</p>

<pre>SEX DIFFERENCES ARE HERE TO STAY</pre>

<p>The <code>|</code> symbol feeds the output from the curl command to the sed command. The exact arguments we are using for sed we will not go into today, because it is a bit daunting if you are just getting into this sort of thing, but it suffices to understand that sed manipulates it input so that everything but the little part inside text=" " is maintained.</p>

<p>Now we have the plain text as output, which we could use as input for another program. For example:</p>

<pre>curl "http://twitter.com/statuses/user_timeline/jennyholzer.json?count=1" | sed 's/.*"text":"\([^"]*\)".*}]/\1/g' | figlet</pre>

<pre> ____  _______  __
/ ___|| ____\ \/ /
\___ \|  _|  \  / 
 ___) | |___ /  \ 
|____/|_____/_/\_\
                  
 ____ ___ _____ _____ _____ ____  _____ _   _  ____ _____ ____  
|  _ \_ _|  ___|  ___| ____|  _ \| ____| \ | |/ ___| ____/ ___| 
| | | | || |_  | |_  |  _| | |_) |  _| |  \| | |   |  _| \___ \ 
| |_| | ||  _| |  _| | |___|  _ &lt;| |___| |\  | |___| |___ ___) |
|____/___|_|   |_|   |_____|_| \_\_____|_| \_|\____|_____|____/ 
                                                                
    _    ____  _____   _   _ _____ ____  _____   _____ ___  
   / \  |  _ \| ____| | | | | ____|  _ \| ____| |_   _/ _ \ 
  / _ \ | |_) |  _|   | |_| |  _| | |_) |  _|     | || | | |
 / ___ \|  _ &lt;| |___  |  _  | |___|  _ &lt;| |___    | || |_| |
/_/   \_\_| \_\_____| |_| |_|_____|_| \_\_____|   |_| \___/ 
                                                            
 ____ _____  _ __   __
/ ___|_   _|/ \\ \ / /
\___ \ | | / _ \\ V / 
 ___) || |/ ___ \| |  
|____/ |_/_/   \_\_|  
</pre>

<p>Now we have Jenny Holzer ascii art!</p>

<p>We are going to go a bit further with this. What we want to do is layout this plain text in such a way that we could display it or print it. For this we are going to use a program called pango-view. It comes as part of pango, which we will have to install:</p>

<pre>brew install pango</pre>

<p>In fact, pango-view, spoils the fun somewhat, because it doesn’t let you use it as part of a pipeline. We’ll have to store the Jenny tweet into a text file:</p>

<pre>curl "http://twitter.com/statuses/user_timeline/jennyholzer.json?count=1" | sed 's/.*"text":"\([^"]*\)".*}]/\1/g' &gt; jennytweet.txt</pre>

<p>The <code>&gt;</code> lets you store text output into a file. So we are storing the output of are pipeline, the plain text tweet, into the file <code>jennytweet.txt</code>.</p>

<p>Pango-view lets us lay-out the text and output it as a picture:</p>

<pre>pango-view jennytweet.txt -q -o jennytweet.png</pre>

<p><img src="/and/assets/called/jennytweet-plain.png" style="width:353;height:39;" alt="‘SEX DIFFERENCES ARE HERE TO STAY’ set in pango-view’s default font" title=""></p>

<p>If you type <code>man pango-view</code> you get an overview of the different options you have. <code>-q</code>, for example suppresses the default behavior to also display the result in a window.  <code>-o</code> specifies the output file, in this case jennytweet.png. Next to these two options, we also specify an <em>argument</em>, which is the inputfile to use. The program knows it is an argument instead of option, because it is not preceded by a dash and an option name.</p>

<p>In the man page, we read that we can use <code>--font</code> to specify a font. It does not tell you the format to do so, which is the name followed by the size:</p>

<pre>pango-view jennytweet.txt -q -o jennytweet.png --font "Futura 36"</pre>

<p><img src="/and/assets/called/jennytweet-banner.png" style="width:882;height:83;" alt="‘SEX DIFFERENCES ARE HERE TO STAY’ set in Futura" title=""></p>

<p>By default, pango-view thinks in pixels. So the Futura will have an x-height of 36 pixels. If we don’t specify any measurement for the width, the text will by laid out on one line like a long banner, the width determined by the width of the text.</p>

<p>If we want to produce the look of a laid-out piece of text, we will have to specify a width:</p>

<pre>pango-view jennytweet.txt -q -o jennytweet-laidout.png --font "Futura 36" -w 400</pre>

<p><img src="/and/assets/called/jennytweet-laidout.png" style="width:553;height:146;" alt="‘SEX DIFFERENCES ARE HERE TO STAY’ set in Futura, laid out to a maximum width" title=""></p>

<p>The cool thing about pango-view is that it can also generate vector files: pdf, but also svg and postscript. You just change the filename, and it does it automatically.</p>

<pre>pango-view jennytweet.txt -q -o jennytweet-laidout.ps --font "Futura 36" -w 400</pre>

<p>(Check out the resulting file in preview with <code>open jennytweet-laidout.ps</code>.)</p>

<p>Why postscript? Well, we have this really cool old-school postscript utility called poster. And we are going to use this to create a tiling version of the image we just created, that spans many sheets of paper. First install poster:</p>

<pre>brew update
brew install poster</pre>

<p>(You do no have the brew command? See tellyou’s post about homebrew). To generate a poster, you can do:</p>

<pre>poster -s 4.4 jennytweet-laidout.ps &gt; jennyposter.ps</pre>

<p>The -s 4.4 scales our original image 4.4 times. The original image has no real size declared in cm, so I did not know beforehand how big the result was going to be. I just came up with this 4.4 value by trail and error.</p>

<p><a href="/and/assets/called/jennytweet-pages.png"><img src="/and/assets/scaled/to/490/wide/and/called/jennytweet-pages.png" style="width:421px;height:490px"></a></p>

<p>VoilÃÂ&nbsp;. One can open this in preview and print it. Heck, one can even print it from the command line:</p>

<pre>lpr jennyposter.ps</pre>

<p>Let’s hang it on the wall.</p>
    ]]>
        
    </content>
</entry>

</feed>

